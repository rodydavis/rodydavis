---
import Layout from "./RootLayout.astro";
import TableOfContents from "../components/TableOfContents.astro";
import TagChip from "../components/TagChip";
import type { MarkdownInstance } from "astro";

type Props = MarkdownInstance<Record<string, any>>;
const { frontmatter, getHeadings } = Astro.props;
const { title, date, updatedDate, image, tags } = frontmatter;
const headings = getHeadings();

function convertDate(date: string) {
  return new Date(date).toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
  });
}
---

<Layout {...Astro.props}>
  <article class="markdown-body">
    <div class="header">
      <h1 class="title">{title}</h1>
      {date && <time>{convertDate(date)}</time>}
      {
        updatedDate && (
          <div>
            Last updated on <time>{updatedDate}</time>
          </div>
        )
      }
      <div class="tags">
        {
          tags &&
            tags.map((tag: string) => (
              <TagChip
                tag={tag}
                active={false}
                client:idle
                onClick={() => {
                  window.location.href = `/tags/${tag}`;
                }}
              />
            ))
        }
      </div>
      {
        headings && (
          <div class="headings">
            <TableOfContents headings={headings} />
          </div>
        )
      }
    </div>
    <slot />
  </article>
</Layout>

<style>
  article {
    max-width: 860px;
    margin: 0 auto;
    padding: 1rem;
  }
  img {
    height: auto;
    max-height: 400px;
    object-fit: cover;
    object-position: center;
    margin-bottom: 2rem;
    display: block;
    width: 100%;
  }
  time {
    font-size: 0.9rem;
    font-weight: 400;
    display: block;
    margin-bottom: 1rem;
  }
  .headings {
    margin: 1.5rem 0;
  }
  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin: 1rem 0;
    margin-bottom: 1.5rem;
  }
  .header {
    padding: 1rem;
    display: block;
  }
</style>

<style is:global>
  @import url("https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/5.1.0/github-markdown.css");

  pre.astro-code {
    position: relative;
    margin: 5px 0;
    padding: 1.75rem 0 1.75rem 1rem;
  }
  pre.astro-code button {
    position: absolute;
    top: 5px;
    right: 5px;
    font-family: inherit;
    font-size: 0.8rem;
    background: var(--tag-color);
    color: var(--tag-background);
    border: 1px solid var(--tag-background);
    border-radius: 4px;
    padding: 0.25rem 0.5rem;
    cursor: pointer;
  }

  pre.astro-code button:hover {
    background: var(--tag-background);
    color: var(--tag-color);
    border-color: var(--tag-color);
  }

  @media (prefers-color-scheme: dark) {
    pre[data-theme="light"],
    code[data-theme="light"] {
      display: none;
    }
  }

  @media (prefers-color-scheme: light), (prefers-color-scheme: no-preference) {
    pre[data-theme="dark"],
    code[data-theme="dark"] {
      display: none;
    }
  }

  article.markdown-body {
    margin: 0 auto;
  }
</style>

<script>
  const copyButtonLabel = "Copy Code";
  const blocks = document.querySelectorAll("pre");

  blocks.forEach((block) => {
    if (navigator.clipboard) {
      let button = document.createElement("button");
      button.innerText = copyButtonLabel;
      block.appendChild(button);
      button.addEventListener("click", async () => {
        await copyCode(block);
      });
    }
  });

  async function copyCode(block: HTMLElement) {
    let code = block.querySelector("code");
    if (!code) return;
    let text = code.innerText;
    await navigator.clipboard.writeText(text);
  }
</script>
