<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Rody Davis Blog Feed</title>
        <link>https://rodydavis.com/</link>
        <description>This is my personal feed!</description>
        <lastBuildDate>Sat, 26 Dec 2020 06:40:51 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <image>
            <title>Rody Davis Blog Feed</title>
            <url>https://rodydavis.com/assets/icons/icon_512.png</url>
            <link>https://rodydavis.com/</link>
        </image>
        <copyright>All rights reserved 2020, Rody Davis</copyright>
        <category>Technology</category>
        <item>
            <title><![CDATA[Automate Flutter App Releases]]></title>
            <link>https://rodydavis.com/#/blog/assets/blog/automate-flutter-apps</link>
            <guid>assets/blog/automate-flutter-apps</guid>
            <pubDate>Fri, 15 Mar 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[min read]]></description>
            <content:encoded><![CDATA[<h2 id="automate-flutter-app-releases">Automate Flutter App Releases</h2>
<h3 id="tldr">TLDR</h3>
<p>You can find the script <a href="https://gist.github.com/rodydavis/774b36e32d7efa882cca8dd16da6e74c" rel="noopener noreferrer" target="_blank">here</a>.</p>
<script src="https://gist.github.com/rodydavis/774b36e32d7efa882cca8dd16da6e74c.js"></script>
<p>Make your life easier and automate your builds to beta and production!</p>
<h3 id="what-you-need">What you need</h3>
<ul>
<li><a href="https://fastlane.tools/" rel="noopener noreferrer" target="_blank">Fastlane</a> setup in each directory</li>
<li><a href="https://pub.dartlang.org/packages/build_runner" rel="noopener noreferrer" target="_blank">build_runner</a> as a dependency</li>
<li>Git Project in VCS</li>
</ul>
<h3 id="initial-setup">Initial Setup</h3>
<ul>
<li>Download <a href="https://gist.github.com/rodydavis/774b36e32d7efa882cca8dd16da6e74c" rel="noopener noreferrer" target="_blank">this file</a></li>
<li>Put it at the root level of your flutter project</li>
<li>Open the terminal and navigate to your project location</li>
<li>Enter this command: chmod +x release.sh</li>
</ul>
<h3 id="usage">Usage</h3>
<p>Now you can call this script!</p>
<ul>
<li>For beta: <code>./release.sh beta</code></li>
<li>For production: <code>./release.sh release</code></li>
</ul>
<h3 id="overview">Overview</h3>
<ul>
<li>Bump the version numbers if you are using the version in the pubspec.yaml</li>
<li>Release the apps with Fastlane</li>
<li>Format all Dart Files</li>
<li>Clean Project</li>
<li>Rebuild classes</li>
<li>Add commit messages</li>
<li>Updates Cocoa Pods</li>
</ul>]]></content:encoded>
            <category>automate-flutter-apps.md</category>
        </item>
        <item>
            <title><![CDATA[Deep Linking for Flutter Web]]></title>
            <link>https://rodydavis.com/#/blog/assets/blog/deep-linking-flutter-web</link>
            <guid>assets/blog/deep-linking-flutter-web</guid>
            <pubDate>Wed, 11 Mar 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[2 min read]]></description>
            <content:encoded><![CDATA[<h2 id="deep-linking-for-flutter-web">Deep Linking for Flutter Web</h2>
<p>In this article I will show you how to have proper URL navigation for your application. Open links to specific pages, protected routes and custom transitions.</p>
<p>There is a online demo here:</p>
<p><a href="https://rodydavis.github.io/flutter_deep_linking/" rel="noopener noreferrer" target="_blank">https://rodydavis.github.io/flutter_deep_linking/</a></p>
<p>Here is the source code:</p>
<p><a href="https://github.com/rodydavis/flutter_deep_linking" rel="noopener noreferrer" target="_blank">https://github.com/rodydavis/flutter_deep_linking</a></p>
<h3 id="setup">Setup</h3>
<ul>
<li><p>Create a new flutter project called “flutter_deep_linking”</p></li>
<li><p>Open that folder up in VSCode</p></li>
<li><p>Update your “pubspec.yaml” with the following:</p></li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*T8p4RgLHWHHaAo1JbhUB-g.png" alt="" /></p>
<h3 id="step-1">Step 1</h3>
<ul>
<li>Create a file at “lib/ui/home/screen.dart” and add the following:</li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*1qTWt0lGfSQeUwoTjzbFuA.png" alt="" /></p>
<ul>
<li>Update your “lib/main.dart” with the following:</li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*Vo3FEkRX_to3SbYsUQ8a5Q.png" alt="" /></p>
<ul>
<li>Run your application and you should see the following:</li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/3468/1*1O9oKvIOSCpgwJ6GekFG4Q.png" alt="" /></p>
<h3 id="step-2">Step 2</h3>
<p>Now we need to grab the url the user enters into the address bar.</p>
<ul>
<li><p>Create a folder at this location “lib/plugins/navigator”</p></li>
<li><p>Create a file inside named: “web.dart” with the following:</p></li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/2072/1*hkuI9pfODs-yewfNUPMbTw.png" alt="" /></p>
<ul>
<li>Create a file inside named: “unsupported.dart” with the following:</li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*u2BPO9L2w9ci-RI9dOi43Q.png" alt="" /></p>
<ul>
<li>Create a file inside named: “navigator.dart” with the following:</li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/2032/1*-QnmWVuypD4z58ZXLircaA.png" alt="" /></p>
<ul>
<li>Now go back to your “lib/main.dart” file and add the navigator:</li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/2080/1*UN0nQy8wcXELNBzfIMqNZA.png" alt="" /></p>
<blockquote>
  <p>It’s important to import the navigator as shown as this will have the conditional import for web compiling.</p>
</blockquote>
<ul>
<li>If you run the app now nothing should change.</li>
</ul>
<h3 id="step-3">Step 3</h3>
<p>Now let’s add the proper routing.</p>
<ul>
<li>Create a new file “lib/ui/router.dart” and add the following:</li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/2404/1*JpwIDmcnQMzxTdSr0OQWfQ.png" alt="" /></p>
<ul>
<li>Also update “lib/main.dart” with the following:</li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/2120/1*4e_oz-ENDkaBS35ZoEZQMA.png" alt="" /></p>
<blockquote>
  <p>Notice how we removed the “home” field for MaterialApp. This is because the router will handle everything. By default we will go home on “/”</p>
</blockquote>
<h3 id="step-4">Step 4</h3>
<p>Now let’s add multiple screens to put this to the test! Add the following folders and files.</p>
<ul>
<li>Create a file “lib/ui/account/screen.dart” and add the following:</li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/2056/1*vRXbGfLK-D1827s2C57aEQ.png" alt="" /></p>
<ul>
<li>Create a file “lib/ui/settings/screen.dart” and add the following:</li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*FJK7a8eeOyVFbAcULxo_Gw.png" alt="" /></p>
<ul>
<li>Create a file “lib/ui/about/screen.dart” and add the following:</li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*A9CJ8-bGCv2Np6ZLS9l5oA.png" alt="" /></p>
<ul>
<li>Add the following to “lib/ui/router.dart”:</li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/2332/1*kKTHn14JH6AXhkbuLUCnFA.png" alt="" /></p>
<ul>
<li>Now when you navigate to /about, /account and /settings you will go to the new pages!</li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/3468/1*5Qtymz13vrEZmCa9zRikWw.png" alt="" /></p>
<h3 id="step-5">Step 5</h3>
<p>Now let’s tie into the browser navigation buttons! Update “lib/ui/home/screen.dart” with the following:</p>
<p><img src="https://cdn-images-1.medium.com/max/2516/1*6JTelDsDG6njWK8watZdlQ.png" alt="" /></p>
<ul>
<li>Now when you run the application and click on the settings icon it will launch the new screen as expected. But if you click your browsers back button it will go back to the home screen!</li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/3468/1*Fji7xHupcpduXITJ9JmzYw.png" alt="" /></p>
<p><img src="https://cdn-images-1.medium.com/max/3468/1*8wQrI1MJPi6MGr65jaqjTQ.png" alt="" /></p>
<h3 id="step-6">Step 6</h3>
<p>These urls are great but what if you want to pass data such as an ID that is not known ahead of time? No worries!</p>
<ul>
<li>Update “lib/ui/account/screen.dart” with the following:</li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/2184/1*yOpcN7lpYP9cc5Mo2dJQwg.png" alt="" /></p>
<ul>
<li>Let’s update our “lib/ui/router.dart” with the following:</li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/2064/1*izyMARAi5g8GrV3q-qwUcw.png" alt="" /></p>
<ul>
<li>Now when you run your application and navigate to “/account/40” you will see the following:</li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/3468/1*wKMr8wDsEWKxvrkTVnfKLQ.png" alt="" /></p>
<h3 id="conclusion">Conclusion</h3>
<p>Dynamic routes work great for Flutter web, you just need to know what to tweak! This package uses a forked version of fluro for some fixes I added but once the PRs is merged you can just use the regular package. Let me know what you think below and if there is a better way I am not seeing!</p>
<p>Here is the final code: <a href="https://github.com/rodydavis/flutter_deep_linking" rel="noopener noreferrer" target="_blank">https://github.com/rodydavis/flutter_deep_linking</a></p>]]></content:encoded>
            <category>deep-linking-flutter-web.md</category>
            <enclosure url="https://cdn-images-1.medium.com/max/2000/1*T8p4RgLHWHHaAo1JbhUB-g.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Displaying HTML in Flutter]]></title>
            <link>https://rodydavis.com/#/blog/assets/blog/display-html-in-flutter</link>
            <guid>assets/blog/display-html-in-flutter</guid>
            <pubDate>Tue, 10 Mar 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[2 min read]]></description>
            <content:encoded><![CDATA[<h2 id="displaying-html-in-flutter">Displaying HTML in Flutter</h2>
<p>Sometimes you have content in HTML that needs to be displayed and interacted with in Flutter.</p>
<p>Online Demo:<a href="https://rodydavis.github.io/easy_web_view/#/" rel="noopener noreferrer" target="_blank">https://rodydavis.github.io/easy_web_view/#/</a></p>
<p><img src="https://cdn-images-1.medium.com/max/4112/1*4vexucSoyjRip7TBQZhkog.png" alt="" /></p>
<p>For those impatient I created a package for you to get all the following functionally and more here: <a href="https://pub.dev/packages/easy_web_view" rel="noopener noreferrer" target="_blank">https://pub.dev/packages/easy_web_view</a></p>
<h3 id="getting-started">Getting Started</h3>
<p>Create a new flutter project named whatever you want.</p>
<blockquote>
  <p>If you plan on showing HTML content on iOS/Android you will need to add the following to your pubspec.yaml</p>
</blockquote>
<pre><code>webview_flutter: ^0.3.15+1</code></pre>
<h3 id="web">Web</h3>
<p>Reference: <a href="https://github.com/rodydavis/easy_web_view/blob/master/lib/src/web.dart" rel="noopener noreferrer" target="_blank">https://github.com/rodydavis/easy_web_view/blob/master/lib/src/web.dart</a></p>
<p>To show html on Flutter web we need to use an HTMLElementView. This is a platform view that allows us to display native content.</p>
<p>We first need to register the Element and add all the options we need. Here we are creating an iFrame element and setting the source based on if it is markdown, html or a url.</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*NRDDwVIppMFu1MHpPNHYmA.png" alt="" /></p>
<p>To display valid HTML you can set the src field to the following:</p>
<pre><code>_src = "data:text/html;charset=utf-8," + Uri.encodeComponent("HTML_CONTENT_HERE");</code></pre>
<blockquote>
  <p>For the package you can also pass markdown to the src and it will convert it for you.</p>
</blockquote>
<p>After you call the setup method it is now time to display your new platform view:</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*4YtrCKZYr6e1bCBZ-aoLZg.png" alt="" /></p>
<p>You need to use the same viewType string as you registered for “registerViewFactory” method earlier.</p>
<p>Finally you need to wrap it in a container or sized box with an explicit width and height!</p>
<h3 id="mobile">Mobile</h3>
<p>Reference: <a href="https://github.com/rodydavis/easy_web_view/blob/master/lib/src/mobile.dart" rel="noopener noreferrer" target="_blank">https://github.com/rodydavis/easy_web_view/blob/master/lib/src/mobile.dart</a></p>
<p>Mobile setup should be easier. Let’s add a method for updating the url that we will pass to the web view.</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*6xLbxuNL69Xx6XioN56YWA.png" alt="" /></p>
<p>Create the controller:</p>
<pre><code>WebViewController _controller;</code></pre>
<p>And when ever the src changes call this method:</p>
<pre><code>_controller.loadUrl(_updateUrl(widget.src), headers: widget.headers);</code></pre>
<p>Finally lets show the html in the widget tree:</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*uvsRUE_sReCOZhsXOLiLaQ.png" alt="" /></p>
<h3 id="conclusion">Conclusion</h3>
<p>If you want to see a complete example and advanced use case view the source here: <a href="https://github.com/rodydavis/easy_web_view" rel="noopener noreferrer" target="_blank">https://github.com/rodydavis/easy_web_view</a></p>
<p>And if you just want to have it all done for you use this package: <a href="https://pub.dev/packages/easy_web_view" rel="noopener noreferrer" target="_blank">https://pub.dev/packages/easy_web_view</a></p>
<p>Feel free to make PRs if you have anything that could help make it better too (Or if you find bugs).</p>
<p>When you show HTML this way you will find that you can interact, select text and work with it just like you would it it were a regular web page. If you are using the package you can also just pass embedded content or html elements too without needing a full html valid file (YouTube video for example).</p>]]></content:encoded>
            <category>display-html-in-flutter.md</category>
            <enclosure url="https://cdn-images-1.medium.com/max/4112/1*4vexucSoyjRip7TBQZhkog.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Using Fastlane in Flutter and CI]]></title>
            <link>https://rodydavis.com/#/blog/assets/blog/fastlane-and-flutter</link>
            <guid>assets/blog/fastlane-and-flutter</guid>
            <pubDate>Wed, 16 Oct 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[min read]]></description>
            <content:encoded><![CDATA[<h2 id="using-fastlane-in-flutter-and-ci">Using Fastlane in Flutter and CI</h2>
<p>Prerequisites :</p>
<ul>
<li><p>Understand what <a href="https://fastlane.tools/" rel="noopener noreferrer" target="_blank">Fastlane</a> is and how it works</p></li>
<li><p>Project builds correctly following these <a href="https://flutter.dev/docs/deployment/cd" rel="noopener noreferrer" target="_blank">docs</a></p></li>
<li><p>Android app setup in <a href="https://developer.android.com/distribute/console" rel="noopener noreferrer" target="_blank">Google Play Console</a></p></li>
<li><p>iOS app setup in <a href="https://appstoreconnect.apple.com/" rel="noopener noreferrer" target="_blank">AppStore Connect</a></p></li>
<li><p><a href="https://flutter.dev/docs/get-started/install" rel="noopener noreferrer" target="_blank">Flutter is installed</a> and your project is created</p></li>
</ul>
<ol>
<li><p>Open your Flutter project</p></li>
<li><p>Run: cd ios</p></li>
<li><p>Run: fastlane init and follow the prompts</p></li>
<li><p>Replace the Fastfile contents with this:</p></li>
</ol>
<iframe src="https://medium.com/media/fbfeb5ff49f489283bb93b88172e4a44" frameborder=0></iframe>
<ol start="5">
<li><p>Run: cd .. &amp;&amp; cd android</p></li>
<li><p>Run: fastlane init and follow the prompts</p></li>
<li><p>Replace the Fastfile contents with this:</p></li>
</ol>
<iframe src="https://medium.com/media/ef171e4a2ba0d48a77bcb266754d2886" frameborder=0></iframe>
<ol start="8">
<li><p>Run: fastlane add_plugin versioning_android and enter your password if needed</p></li>
<li><p>Run: cd ..</p></li>
</ol>
<p>Now you are ready to launch your app to beta!</p>
<p>For ios run: cd ios &amp;&amp; fastlane beta</p>
<p>For android run: cd android &amp;&amp; fastlane beta</p>
<p>Stay tuned for an article soon where we use these fastlane sub folders for automating the releases on <a href="https://github.com/features/actions" rel="noopener noreferrer" target="_blank">Github Actions</a> CI</p>]]></content:encoded>
            <category>fastlane-and-flutter.md</category>
        </item>
        <item>
            <title><![CDATA[Creating Your First Flutter Project]]></title>
            <link>https://rodydavis.com/#/blog/assets/blog/first-flutter-project</link>
            <guid>assets/blog/first-flutter-project</guid>
            <pubDate>Sun, 28 Apr 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[3 min read]]></description>
            <content:encoded><![CDATA[<h2 id="creating-your-first-flutter-project">Creating Your First Flutter Project</h2>
<p>Flutter is a UI Toolkit from Google allowing you to create expressive and unique experiences unmatched on any platform. You can write your UI once and run it everywhere. Yes everywhere! Web, iOS, Android, Windows, Linux, MacOS, Raspberry PI and much more…</p>
<iframe src="https://medium.com/media/f76ce9fa69d591d191fb2d83334153d7" frameborder=0></iframe>
<p>If you prefer a video you can follow the YouTube series I am doing called “Flutter Take 5” where I explore topics that you encounter when building a Flutter application. I will also give you tips and tricks as I go through the series.</p>
<p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/rtBkU4pvHcw" frameborder="0" allowfullscreen></iframe></center></p>
<h3 id="what-is-flutter">What is Flutter</h3>
<p>Flutter recently crossed React Native on Github and now has more than 2 million developers using Flutter to create applications. There are more than 50,000 apps on Google Play alone published with Flutter.<br />
<a href="https://flutter.dev/" rel="noopener noreferrer" target="_blank"><strong>Flutter - Beautiful native apps in record time</strong>
<em>Flutter is Google's UI toolkit for crafting beautiful, natively compiled applications for mobile, web, and desktop from…</em>flutter.dev</a></p>
<h3 id="getting-started">Getting Started</h3>
<p>Getting started is very easy once you get the SDK installed. After it is installed creating new applications, plugins and packages is lighting fast. Follow this guide to install Flutter:<br />
<a href="https://flutter.dev/docs/get-started/install" rel="noopener noreferrer" target="_blank"><strong>Install</strong>
<em>How to set up your code editor.</em>flutter.dev</a></p>
<p>One nice thing about Flutter is that it is developed in the open as an open source project that anyone can contribute to. If there is something missing you can easily fork the repo and make a PR for the missing functionality.</p>
<iframe src="https://medium.com/media/8cce835d2d6193d6b3cd27468349b02a" frameborder=0></iframe>
<h3 id="create-the-project">Create the Project</h3>
<p>Now that you have Flutter installed it is time to create your first (Of Many 😉) Flutter project! Open up your terminal and navigate to wherever you want the application folder to be created. Once you “cd” into the directory you can type the following:</p>
<pre><code>$ flutter create my_awesome_project</code></pre>
<p>You can replace “my_awesome_project” with whatever you want the project to be called. It is important to use snake_case as it is the valid syntax for project names in dart.</p>
<iframe src="https://medium.com/media/e92b75a1454d3a24dda41a5266ee1936" frameborder=0></iframe>
<p>Congratulations you just created your first project!</p>
<h3 id="open-the-project">Open the Project</h3>
<p>So you may be wondering what we just created so let us dive in to the details. You can open up you project in VSCode if you have it installed by typing the following into terminal:</p>
<pre><code>$ cd my_awesome_project &amp;&amp; code .</code></pre>
<p>You can open up the folder in your favorite IDE if you prefer. Two important files to notice are the pubspec.yaml and lib/main.dart</p>
<p>Your UI and Logic is located at “lib/main.dart” and you should see the following:</p>
<iframe src="https://medium.com/media/0e7b12e3b326ec2802a9a5a38d7c39d6" frameborder=0></iframe>
<p>You can define any dependencies and plugins needed for the application at “pubspec.yaml” and you should see the following:</p>
<iframe src="https://medium.com/media/8cbad32b9a14728b5a2dbb1b8d0bcab4" frameborder=0></iframe>
<h3 id="running-the-project">Running the Project</h3>
<p>Running the application is very easy too. While there are buttons in all the IDEs you can also run your project from the command line for quick testing. You can also configure <a href="https://flutter.dev/desktop" rel="noopener noreferrer" target="_blank">Flutter for Desktop</a> and no need to wait for an emulator to warm up. Open your project and enter the following into terminal:</p>
<pre><code>$ flutter run -d macos</code></pre>
<p>Notice the “-d macos” as you can customize what device you want to run on. You should see the following in terminal:</p>
<pre><code>Building macOS application...                                           
Syncing files to device macOS...                                   141ms

Flutter run key commands.
r Hot reload. 🔥🔥🔥
R Hot restart.
h Repeat this help message.
d Detach (terminate "flutter run" but leave application running).
c Clear the screen
q Quit (terminate the application on the device).
An Observatory debugger and profiler on macOS is available at: [http://127.0.0.1:58932/f1Mspofty_k=/](http://127.0.0.1:58932/f1Mspofty_k=/)
Application finished.</code></pre>
<p>You can also run multiple devices at the same time. You can find more info on the <a href="https://github.com/flutter/flutter/wiki/Multi-device-debugging-in-VS-Code" rel="noopener noreferrer" target="_blank">Flutter Octopus here</a>. If everything went well you should see the following application launch:</p>
<p><img src="https://cdn-images-1.medium.com/max/3560/1*O3W-7Ge-qfMk7i4CgqN-oQ.png" alt="" /></p>
<p>It is a pretty basic application at this point but it is important to show how easy it is to change the state in the application. You can rebuild the UI just by calling “setState()”.</p>
<h3 id="testing-the-project">Testing the Project</h3>
<p>Testing is one of the reasons I love Flutter so much and it is dead simple to run and write tests for the project. If you look at the file “test/widget_test.dart” you should see the following:</p>
<iframe src="https://medium.com/media/0906ce21f6d0fc21a4f1c348cb7cd6cd" frameborder=0></iframe>
<p>You can run these tests very easily. Open your project and type the following into the terminal:</p>
<pre><code>$ flutter test
00:07 +1: All tests passed!</code></pre>
<p>Just like that all your tests will run and you can catch any bugs you missed.</p>
<iframe src="https://medium.com/media/2c0ca7eeb14d9eec543125f78fcead9c" frameborder=0></iframe>
<p>You can also generate code coverage for your applications easily by typing the following:</p>
<pre><code>flutter test --coverage</code></pre>
<p>This will generate a new file at “coverage/lcov.info” and will read the following:</p>
<iframe src="https://medium.com/media/81c45c00e752b960fa4bacaa5d59c718" frameborder=0></iframe>
<p>You can now easily create badges and graphs with the LCOV data. Here is a package that will make that easier:<br />
<a href="https://pub.dev/packages/test_coverage" rel="noopener noreferrer" target="_blank"><strong>test_coverage | Dart Package</strong>
<em>Command line utility to run tests in Dart VM and collect coverage data.</em>pub.dev</a></p>
<h3 id="conclusion">Conclusion</h3>
<p>Flutter makes it possible to build applications very quickly that do not depend on web or mobile technologies. It can familiar to writing a game as you have to design all your own UI. You can find the final source code here:<br />
<a href="https://github.com/rodydavis/flutter_take_5/tree/master/01_your_first_project" rel="noopener noreferrer" target="_blank"><strong>rodydavis/flutter_take_5</strong>
<em>A new Flutter project. This project is a starting point for a Flutter application. A few resources to get you started…</em>github.com</a></p>
<p>You can also find the Flutter source code here:<br />
<a href="https://github.com/flutter/flutter" rel="noopener noreferrer" target="_blank"><strong>flutter/flutter</strong>
<em>Flutter makes it easy and fast to build beautiful apps for mobile and beyond. - flutter/flutter</em>github.com</a></p>]]></content:encoded>
            <category>first-flutter-project.md</category>
            <enclosure url="https://cdn-images-1.medium.com/max/3560/1*O3W-7Ge-qfMk7i4CgqN-oQ.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Flutter Cheat Sheet — Terminal]]></title>
            <link>https://rodydavis.com/#/blog/assets/blog/flutter-cheat-sheet</link>
            <guid>assets/blog/flutter-cheat-sheet</guid>
            <pubDate>Thu, 05 Mar 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[min read]]></description>
            <content:encoded><![CDATA[<h2 id="flutter-cheat-sheet — terminal">Flutter Cheat Sheet — Terminal</h2>
<p>Run Flutter web with SKIA</p>
<pre><code>flutter run -d web --release --dart-define=FLUTTER_WEB_USE_SKIA=true</code></pre>
<ul>
<li><p>Run Flutter web with Canvas Kit</p>
<p>flutter run -d chrome --release --dart-define=FLUTTER_WEB_USE_EXPERIMENTAL_CANVAS_TEXT=true</p></li>
<li><p>Build your Flutter web app to Github Pages to the docs folder</p>
<p>flutter build web &amp;&amp; rm -rf ./docs &amp;&amp; mkdir ./docs &amp;&amp; cp -a ./build/web/. ./docs/</p></li>
<li><p>Clean rebuild CocoaPods</p>
<p>cd ios &amp;&amp; pod deintegrate &amp;&amp; pod cache clean —all &amp;&amp; pod install &amp;&amp; cd ..</p></li>
</ul>
<blockquote>
  <p>Sometimes with firebase you need to run: <code>pod update Firebase</code></p>
</blockquote>
<ul>
<li><p>Create Dart package with Example</p>
<p>flutter create -t plugin . &amp;&amp; flutter create -i swift -a kotlin --androidx example</p></li>
<li><p>Watch Build Files</p>
<p>flutter packages pub run build_runner watch  -—delete-conflicting-outputs</p></li>
<li><p>Generate Build Files</p>
<p>flutter packages pub run build_runner build  -—delete-conflicting-outputs</p></li>
<li><p>Build Bug Report</p>
<p>flutter run —bug-report</p></li>
<li><p>Flutter generate test coverage</p>
<p>flutter test --coverage &amp;&amp; genhtml -o coverage coverage/lcov.info</p></li>
<li><p>Rebuild Flutter Cache</p>
<p>flutter pub pub cache repair</p></li>
<li><p>Conditional Export/Import</p>
<p>export 'unsupported.dart'</p>
<p>if (dart.library.html) 'web.dart'</p>
<p>if (dart.library.io) 'mobile.dart';</p></li>
<li><p>Kill Dart Running</p>
<p>killall -9 dart</p></li>
</ul>]]></content:encoded>
            <category>flutter-cheat-sheet.md</category>
        </item>
        <item>
            <title><![CDATA[Multi-touch Canvas with Flutter]]></title>
            <link>https://rodydavis.com/#/blog/assets/blog/flutter-multi-touch-canvas</link>
            <guid>assets/blog/flutter-multi-touch-canvas</guid>
            <pubDate>Wed, 10 Jun 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[16 min read]]></description>
            <content:encoded><![CDATA[<h2 id="multi-touch-canvas-with-flutter">Multi-touch Canvas with Flutter</h2>
<p>If you ever wanted to create a canvas in <a href="https://flutter.dev" rel="noopener noreferrer" target="_blank">Flutter</a> that needs to be panned in any direction and allow zoom then you also probably tried to create a <a href="https://api.flutter.dev/flutter/gestures/MultiDragGestureRecognizer-class.html" rel="noopener noreferrer" target="_blank">MultiGestureRecognizer</a> or under a <a href="https://api.flutter.dev/flutter/widgets/GestureDetector-class.html" rel="noopener noreferrer" target="_blank">GestureDetector</a> added onPanUpdate and onScaleUpdate and received an error because both can not work at the same time. Even if you have to GestureDetectors then you will still find it does not work how you want and one will always win.</p>
<p>Online demo: <a href="https://rodydavis.github.io/flutter_multi_touch_canvas/" rel="noopener noreferrer" target="_blank">https://rodydavis.github.io/flutter_multi_touch_canvas/</a></p>
<p>This is the canvas rendering logic used in <a href="https://widget.studio" rel="noopener noreferrer" target="_blank">https://widget.studio</a></p>
<h3 id="multi-touch-goal">Multi Touch Goal</h3>
<ul>
<li>Pan the canvas with two or more fingers</li>
<li>Zoom the canvas with two fingers only (Pinch/Zoom)</li>
<li>Single finger will interact with canvas object and detect selection</li>
<li>Bonus trackpad support with similar results</li>
</ul>
<p>In order to achieve this we need to use a Listener for the trackpad events and raw touch interactions and  <a href="https://api.flutter.dev/flutter/widgets/RawKeyboardListener-class.html" rel="noopener noreferrer" target="_blank">RawKeyboardListener</a> for keyboard shortcuts.</p>
<h3 id="part-1---project-setup">Part 1 - Project Setup</h3>
<p>Open your terminal and type the following:</p>
<pre><code>mkdir flutter_multi_touch
cd flutter_multi_touch
flutter create .
code .</code></pre>
<p>The last line is optional and if you have VSCode installed. The command will open the directory inside VSCode.</p>
<h3 id="part-2---boilerplate">Part 2 - Boilerplate</h3>
<ul>
<li>Remove all comments</li>
<li>Remove extra empty lines</li>
<li>Update UI</li>
</ul>
<p>Right now when you run the project you will have this UI.</p>
<p>Create a new file located at <code>ui/home/screen.dart</code> and add the following:</p>
<pre><code class="dart language-dart">import 'package:flutter/material.dart';

class HomeScreen extends StatelessWidget {
  const HomeScreen({Key key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container();
  }
}</code></pre>
<p>Update <code>main.dart</code> with the following:</p>
<pre><code class="dart language-dart">import 'package:flutter/material.dart';

import 'ui/home/screen.dart';

void main() =&gt; runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      darkTheme: ThemeData.dark().copyWith(
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: HomeScreen(),
    );
  }
}</code></pre>
<p>You will now have a black screen when you run the application.</p>
<h3 id="part-3---creating-the-controller">Part 3 - Creating the Controller</h3>
<p>Now we want to create a class that will act as our controller on the canvas.<br />
Create a new file at <code>src/controllers/canvas.dart</code> and add the following to start:</p>
<pre><code class="dart language-dart">import 'dart:async';

/// Control the canvas and the objects on it
class CanvasController {
  // Controller for the stream output
  final _controller = StreamController&lt;CanvasController&gt;();
  // Reference to the stream to update the UI
  Stream&lt;CanvasController&gt; get stream =&gt; _controller.stream;
  // Emit a new event to rebuild the UI
  void add([CanvasController val]) =&gt; _controller.add(val ?? this);
  // Stop the stream and finish
  void close() =&gt; _controller.close();
    // Start the stream
  void init() =&gt; add();
}</code></pre>
<p>Update the home screen with the following:</p>
<pre><code class="dart language-dart">import 'package:flutter/material.dart';

import '../../src/controllers/canvas.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({Key key}) : super(key: key);

  @override
  _HomeScreenState createState() =&gt; _HomeScreenState();
}

class _HomeScreenState extends State&lt;HomeScreen&gt; {
  final _controller = CanvasController();

  @override
  void initState() {
    _controller.init();
    super.initState();
  }

  @override
  void dispose() {
    _controller.close();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return StreamBuilder&lt;CanvasController&gt;(
        stream: _controller.stream,
        builder: (context, snapshot) {
          if (!snapshot.hasData) {
            return Scaffold(
              appBar: AppBar(),
              body: Center(child: CircularProgressIndicator()),
            );
          }
          final instance = snapshot.data;
          return Scaffold(
            appBar: AppBar(),
            body: Stack(
              children: [
                Positioned(
                  top: 20,
                  left: 20,
                  width: 100,
                  height: 100,
                  child: Container(color: Colors.red),
                )
              ],
            ),
          );
        });
  }
}</code></pre>
<p>Here we are just adding the basics to rebuild when the controller changes or the screen is finished. We are using a stateful widget here because we want to dispose of the controller and load it only once. We are also using a stack because thats all we need under the hood. After a quick hot restart you should have the following view.</p>
<h3 id="part-4---adding-canvas-objects">Part 4 - Adding Canvas Objects</h3>
<p>Now we need to create the class for the objects that will be stored on the canvas. Create a new file at <code>src/classes/canvas_object.dart</code> and add the following:</p>
<pre><code class="dart language-dart">import 'dart:ui';

class CanvasObject&lt;T&gt; {
  final double dx;
  final double dy;
  final double width;
  final double height;
  final T child;

  CanvasObject({
    this.dx = 0,
    this.dy = 0,
    this.width = 100,
    this.height = 100,
    this.child,
  });

  CanvasObject&lt;T&gt; copyWith({
    double dx,
    double dy,
    double width,
    double height,
    T child,
  }) {
    return CanvasObject&lt;T&gt;(
      dx: dx ?? this.dx,
      dy: dy ?? this.dy,
      width: width ?? this.width,
      height: height ?? this.height,
      child: child ?? this.child,
    );
  }

  Size get size =&gt; Size(width, height);
  Offset get offset =&gt; Offset(dx, dy);
  Rect get rect =&gt; offset &amp; size;
}</code></pre>
<p>We are using a generic here to not depend on flutter or material in the class. Update the controller with the following:</p>
<pre><code class="dart language-dart">import 'dart:async';

import 'package:flutter/material.dart';

import '../classes/canvas_object.dart';

/// Control the canvas and the objects on it
class CanvasController {
  /// Controller for the stream output
  final _controller = StreamController&lt;CanvasController&gt;();

  /// Reference to the stream to update the UI
  Stream&lt;CanvasController&gt; get stream =&gt; _controller.stream;

  /// Emit a new event to rebuild the UI
  void add([CanvasController val]) =&gt; _controller.add(val ?? this);

  /// Stop the stream and finish
  void close() =&gt; _controller.close();

  /// Start the stream
  void init() =&gt; add();

  // -- Canvas Objects --

  final List&lt;CanvasObject&lt;Widget&gt;&gt; _objects = [];

  /// Current Objects on the canvas
  List&lt;CanvasObject&lt;Widget&gt;&gt; get objects =&gt; _objects;

  /// Add an object to the canvas
  void addObject(CanvasObject&lt;Widget&gt; value) =&gt; _update(() {
        _objects.add(value);
      });

  /// Add an object to the canvas
  void updateObject(int i, CanvasObject&lt;Widget&gt; value) =&gt; _update(() {
        _objects[i] = value;
      });

  /// Remove an object from the canvas
  void removeObject(int i) =&gt; _update(() {
        _objects.removeAt(i);
      });

  void _update(void Function() action) {
    action();
    add(this);
  }
}</code></pre>
<p>We are just adding the objects to the canvas and removing them if needed. Update the home screen with the following to use these new objects:</p>
<pre><code class="dart language-dart">import 'package:flutter/material.dart';

import '../../src/classes/canvas_object.dart';
import '../../src/controllers/canvas.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({Key key}) : super(key: key);

  @override
  _HomeScreenState createState() =&gt; _HomeScreenState();
}

class _HomeScreenState extends State&lt;HomeScreen&gt; {
  final _controller = CanvasController();

  @override
  void initState() {
    _controller.init();
    _dummyData();
    super.initState();
  }

  void _dummyData() {
    _controller.addObject(
      CanvasObject(
        dx: 20,
        dy: 20,
        width: 100,
        height: 100,
        child: Container(color: Colors.red),
      ),
    );
  }

  @override
  void dispose() {
    _controller.close();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return StreamBuilder&lt;CanvasController&gt;(
        stream: _controller.stream,
        builder: (context, snapshot) {
          if (!snapshot.hasData) {
            return Scaffold(
              appBar: AppBar(),
              body: Center(child: CircularProgressIndicator()),
            );
          }
          final instance = snapshot.data;
          return Scaffold(
            appBar: AppBar(),
            body: Stack(
              children: [
                for (final object in instance.objects)
                  Positioned(
                    top: object.dy,
                    left: object.dx,
                    width: object.width,
                    height: object.height,
                    child: object.child,
                  )
              ],
            ),
          );
        });
  }
}</code></pre>
<p>The UI is thee same as before but now is dynamic and we have access to the Stack children and position of each child.</p>
<h3 id="part-5---capture-the-input">Part 5 - Capture the Input</h3>
<p>We need to capture the input of the MultiGestureRecognizer, GestureDetector and RawKeyboardListener. Update the canvas controller with the following:</p>
<pre><code class="dart language-dart">import 'dart:async';

import 'package:flutter/material.dart';

import '../classes/canvas_object.dart';

/// Control the canvas and the objects on it
class CanvasController {
  /// Controller for the stream output
  final _controller = StreamController&lt;CanvasController&gt;();

  /// Reference to the stream to update the UI
  Stream&lt;CanvasController&gt; get stream =&gt; _controller.stream;

  /// Emit a new event to rebuild the UI
  void add([CanvasController val]) =&gt; _controller.add(val ?? this);

  /// Stop the stream and finish
  void close() {
    _controller.close();
    focusNode.dispose();
  }

  /// Start the stream
  void init() =&gt; add();

  // -- Canvas Objects --

  final List&lt;CanvasObject&lt;Widget&gt;&gt; _objects = [];

  /// Current Objects on the canvas
  List&lt;CanvasObject&lt;Widget&gt;&gt; get objects =&gt; _objects;

  /// Add an object to the canvas
  void addObject(CanvasObject&lt;Widget&gt; value) =&gt; _update(() {
        _objects.add(value);
      });

  /// Add an object to the canvas
  void updateObject(int i, CanvasObject&lt;Widget&gt; value) =&gt; _update(() {
        _objects[i] = value;
      });

  /// Remove an object from the canvas
  void removeObject(int i) =&gt; _update(() {
        _objects.removeAt(i);
      });

  /// Focus node for listening for keyboard shortcuts
  final focusNode = FocusNode();

  /// Raw events from keys pressed
  void rawKeyEvent(BuildContext context, RawKeyEvent key) {}

  /// Called every time a new finger touches the screen
  void addTouch(int pointer, Offset offsetVal, Offset globalVal) {}

  /// Called when any of the fingers update position
  void updateTouch(int pointer, Offset offsetVal, Offset globalVal) {}

  /// Called when a finger is removed from the screen
  void removeTouch(int pointer) {}

  /// Checks if the shift key on the keyboard is pressed
  bool shiftPressed = false;

  /// Scale of the canvas
  double get scale =&gt; _scale;
  double _scale = 1;
  set scale(double value) =&gt; _update(() {
        _scale = value;
      });

  /// Max possible scale
  static const double maxScale = 3.0;
  /// Min possible scale
  static const double minScale = 0.2;
  /// How much to scale the canvas in increments
  static const double scaleAdjust = 0.05;

  /// Current offset of the canvas
  Offset get offset =&gt; _offset;
  Offset _offset = Offset.zero;
  set offset(Offset value) =&gt; _update(() {
        _offset = value;
      });

  void _update(void Function() action) {
    action();
    add(this);
  }
}</code></pre>
<p>Update the home screen with the following:</p>
<pre><code class="dart language-dart">import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';

import '../../src/classes/canvas_object.dart';
import '../../src/controllers/canvas.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({Key key}) : super(key: key);

  @override
  _HomeScreenState createState() =&gt; _HomeScreenState();
}

class _HomeScreenState extends State&lt;HomeScreen&gt; {
  final _controller = CanvasController();

  @override
  void initState() {
    _controller.init();
    _dummyData();
    super.initState();
  }

  void _dummyData() {
    _controller.addObject(
      CanvasObject(
        dx: 20,
        dy: 20,
        width: 100,
        height: 100,
        child: Container(color: Colors.red),
      ),
    );
  }

  @override
  void dispose() {
    _controller.close();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return StreamBuilder&lt;CanvasController&gt;(
        stream: _controller.stream,
        builder: (context, snapshot) {
          if (!snapshot.hasData) {
            return Scaffold(
              appBar: AppBar(),
              body: Center(child: CircularProgressIndicator()),
            );
          }
          final instance = snapshot.data;
          return Scaffold(
            appBar: AppBar(),
            body: Listener(
              behavior: HitTestBehavior.opaque,
              onPointerSignal: (details) {
                if (details is PointerScrollEvent) {
                  GestureBinding.instance.pointerSignalResolver
                      .register(details, (event) {
                    if (event is PointerScrollEvent) {
                      if (_controller.shiftPressed) {
                        double zoomDelta = (-event.scrollDelta.dy / 300);
                        _controller.scale = _controller.scale + zoomDelta;
                      } else {
                        _controller.offset =
                            _controller.offset - event.scrollDelta;
                      }
                    }
                  });
                }
              },
              onPointerMove: (details) {
                _controller.updateTouch(
                  details.pointer,
                  details.localPosition,
                  details.position,
                );
              },
              onPointerDown: (details) {
                _controller.addTouch(
                  details.pointer,
                  details.localPosition,
                  details.position,
                );
              },
              onPointerUp: (details) {
                _controller.removeTouch(details.pointer);
              },
              onPointerCancel: (details) {
                _controller.removeTouch(details.pointer);
              },
              child: RawKeyboardListener(
                autofocus: true,
                focusNode: _controller.focusNode,
                onKey: (key) =&gt; _controller.rawKeyEvent(context, key),
                child: Stack(
                  children: [
                    for (final object in instance.objects)
                      Positioned(
                        top: object.dy,
                        left: object.dx,
                        width: object.width,
                        height: object.height,
                        child: object.child,
                      )
                  ],
                ),
              ),
            ),
          );
        });
  }
}</code></pre>
<p>All we are doing now is just mapping the inputs of the UI to the actions in the controller. Feel free to look through the comments if you are curious how each one works. Running the application should still just show the red square.</p>
<h3 id="part-5---canvas-offset-and-scale">Part 5 - Canvas Offset and Scale</h3>
<p>Now we want to start moving the canvas. Let’s first tackle the offset as scale will take a different approach. Update the home screen with the following:</p>
<pre><code class="dart language-dart">import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';

import '../../src/classes/canvas_object.dart';
import '../../src/controllers/canvas.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({Key key}) : super(key: key);

  @override
  _HomeScreenState createState() =&gt; _HomeScreenState();
}

class _HomeScreenState extends State&lt;HomeScreen&gt; {
  final _controller = CanvasController();

  @override
  void initState() {
    _controller.init();
    _dummyData();
    super.initState();
  }

  void _dummyData() {
    _controller.addObject(
      CanvasObject(
        dx: 20,
        dy: 20,
        width: 100,
        height: 100,
        child: Container(color: Colors.red),
      ),
    );
  }

  @override
  void dispose() {
    _controller.close();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return StreamBuilder&lt;CanvasController&gt;(
        stream: _controller.stream,
        builder: (context, snapshot) {
          if (!snapshot.hasData) {
            return Scaffold(
              appBar: AppBar(),
              body: Center(child: CircularProgressIndicator()),
            );
          }
          final instance = snapshot.data;
          return Scaffold(
            appBar: AppBar(),
            body: Listener(
              behavior: HitTestBehavior.opaque,
              onPointerSignal: (details) {
                if (details is PointerScrollEvent) {
                  GestureBinding.instance.pointerSignalResolver
                      .register(details, (event) {
                    if (event is PointerScrollEvent) {
                      if (_controller.shiftPressed) {
                        double zoomDelta = (-event.scrollDelta.dy / 300);
                        _controller.scale = _controller.scale + zoomDelta;
                      } else {
                        _controller.offset =
                            _controller.offset - event.scrollDelta;
                      }
                    }
                  });
                }
              },
              onPointerMove: (details) {
                _controller.updateTouch(
                  details.pointer,
                  details.localPosition,
                  details.position,
                );
              },
              onPointerDown: (details) {
                _controller.addTouch(
                  details.pointer,
                  details.localPosition,
                  details.position,
                );
              },
              onPointerUp: (details) {
                _controller.removeTouch(details.pointer);
              },
              onPointerCancel: (details) {
                _controller.removeTouch(details.pointer);
              },
              child: RawKeyboardListener(
                autofocus: true,
                focusNode: _controller.focusNode,
                onKey: (key) =&gt; _controller.rawKeyEvent(context, key),
                child: SizedBox.expand(
                  child: Stack(
                    children: [
                      for (final object in instance.objects)
                        AnimatedPositioned.fromRect(
                          duration: const Duration(milliseconds: 50),
                          rect: object.rect.adjusted(
                            _controller.offset,
                            _controller.scale,
                          ),
                          child: FittedBox(
                            fit: BoxFit.fill,
                            child: SizedBox.fromSize(
                              size: object.size,
                              child: object.child,
                            ),
                          ),
                        )
                    ],
                  ),
                ),
              ),
            ),
          );
        });
  }
}

extension RectUtils on Rect {
  Rect adjusted(Offset offset, double scale) {
    final left = (this.left + offset.dx) * scale;
    final top = (this.top + offset.dy) * scale;
    final width = this.width * scale;
    final height = this.height * scale;
    return Rect.fromLTWH(left, top, width, height);
  }
}</code></pre>
<p>Now when you use your trackpad to pan with two fingers you will see the red square move. We now need to add finger support too. You may notice the FittedBox and that will come in as soon as we add scaling.</p>
<p>Now if we move the square off the screen we may need to bring it back. We can add a reset button to the AppBar. Add the following to the canvas controller:</p>
<pre><code class="dart language-dart">  static const double _scaleDefault = 1;
  static const Offset _offsetDefault = Offset.zero;

  void reset() {
    scale = _scaleDefault;
    offset = _offsetDefault;
  }</code></pre>
<p>Update the home screen with the following:</p>
<pre><code class="dart language-dart">import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';

import '../../src/classes/canvas_object.dart';
import '../../src/controllers/canvas.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({Key key}) : super(key: key);

  @override
  _HomeScreenState createState() =&gt; _HomeScreenState();
}

class _HomeScreenState extends State&lt;HomeScreen&gt; {
  final _controller = CanvasController();

  @override
  void initState() {
    _controller.init();
    _dummyData();
    super.initState();
  }

  void _dummyData() {
    _controller.addObject(
      CanvasObject(
        dx: 20,
        dy: 20,
        width: 100,
        height: 100,
        child: Container(color: Colors.red),
      ),
    );
  }

  @override
  void dispose() {
    _controller.close();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return StreamBuilder&lt;CanvasController&gt;(
        stream: _controller.stream,
        builder: (context, snapshot) {
          if (!snapshot.hasData) {
            return Scaffold(
              appBar: AppBar(),
              body: Center(child: CircularProgressIndicator()),
            );
          }
          final instance = snapshot.data;
          return Scaffold(
            appBar: AppBar(
              actions: [
                IconButton(
                  tooltip: 'Reset the Scale and Offset',
                  icon: Icon(Icons.restore),
                  onPressed: _controller.reset,
                ),
              ],
            ),
            body: Listener(
              behavior: HitTestBehavior.opaque,
              onPointerSignal: (details) {
                if (details is PointerScrollEvent) {
                  GestureBinding.instance.pointerSignalResolver
                      .register(details, (event) {
                    if (event is PointerScrollEvent) {
                      if (_controller.shiftPressed) {
                        double zoomDelta = (-event.scrollDelta.dy / 300);
                        _controller.scale = _controller.scale + zoomDelta;
                      } else {
                        _controller.offset =
                            _controller.offset - event.scrollDelta;
                      }
                    }
                  });
                }
              },
              onPointerMove: (details) {
                _controller.updateTouch(
                  details.pointer,
                  details.localPosition,
                  details.position,
                );
              },
              onPointerDown: (details) {
                _controller.addTouch(
                  details.pointer,
                  details.localPosition,
                  details.position,
                );
              },
              onPointerUp: (details) {
                _controller.removeTouch(details.pointer);
              },
              onPointerCancel: (details) {
                _controller.removeTouch(details.pointer);
              },
              child: RawKeyboardListener(
                autofocus: true,
                focusNode: _controller.focusNode,
                onKey: (key) =&gt; _controller.rawKeyEvent(context, key),
                child: SizedBox.expand(
                  child: Stack(
                    children: [
                      for (final object in instance.objects)
                        AnimatedPositioned.fromRect(
                          duration: const Duration(milliseconds: 50),
                          rect: object.rect.adjusted(
                            _controller.offset,
                            _controller.scale,
                          ),
                          child: FittedBox(
                            fit: BoxFit.fill,
                            child: SizedBox.fromSize(
                              size: object.size,
                              child: object.child,
                            ),
                          ),
                        )
                    ],
                  ),
                ),
              ),
            ),
          );
        });
  }
}

extension RectUtils on Rect {
  Rect adjusted(Offset offset, double scale) {
    final left = (this.left + offset.dx) * scale;
    final top = (this.top + offset.dy) * scale;
    final width = this.width * scale;
    final height = this.height * scale;
    return Rect.fromLTWH(left, top, width, height);
  }
}</code></pre>
<p>Now when you press the reset button the canvas animates back to the default offset and scale.</p>
<p>While we are here we can add actions for zoom in/out and connect them to the controller. Add the following to the canvas controller:</p>
<pre><code class="dart language-dart">  void zoomIn() {
    scale += scaleAdjust;
  }

  void zoomOut() {
    scale -= scaleAdjust;
  }</code></pre>
<p>Add the following to the AppBar actions:</p>
<pre><code class="dart language-dart">                  IconButton(
                  tooltip: 'Zoom In',
                  icon: Icon(Icons.zoom_in),
                  onPressed: _controller.zoomIn,
                ),
                IconButton(
                  tooltip: 'Zoom Out',
                  icon: Icon(Icons.zoom_out),
                  onPressed: _controller.zoomOut,
                ),</code></pre>
<p>Now when you run the application you can easily zoom in/out.</p>
<h3 id="part-6---keyboard-shortcuts">Part 6 - Keyboard Shortcuts</h3>
<p>Now we need to capture the keyboard events so we can move the canvas with the arrow keys and scale with +/- keys. Update the controller with the following:</p>
<pre><code class="dart language-dart">import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

import '../classes/canvas_object.dart';

/// Control the canvas and the objects on it
class CanvasController {
  /// Controller for the stream output
  final _controller = StreamController&lt;CanvasController&gt;();

  /// Reference to the stream to update the UI
  Stream&lt;CanvasController&gt; get stream =&gt; _controller.stream;

  /// Emit a new event to rebuild the UI
  void add([CanvasController val]) =&gt; _controller.add(val ?? this);

  /// Stop the stream and finish
  void close() {
    _controller.close();
    focusNode.dispose();
  }

  /// Start the stream
  void init() =&gt; add();

  // -- Canvas Objects --

  final List&lt;CanvasObject&lt;Widget&gt;&gt; _objects = [];

  /// Current Objects on the canvas
  List&lt;CanvasObject&lt;Widget&gt;&gt; get objects =&gt; _objects;

  /// Add an object to the canvas
  void addObject(CanvasObject&lt;Widget&gt; value) =&gt; _update(() {
        _objects.add(value);
      });

  /// Add an object to the canvas
  void updateObject(int i, CanvasObject&lt;Widget&gt; value) =&gt; _update(() {
        _objects[i] = value;
      });

  /// Remove an object from the canvas
  void removeObject(int i) =&gt; _update(() {
        _objects.removeAt(i);
      });

  /// Focus node for listening for keyboard shortcuts
  final focusNode = FocusNode();

  /// Raw events from keys pressed
  void rawKeyEvent(BuildContext context, RawKeyEvent key) {
    // Scale keys
    if (key.isKeyPressed(LogicalKeyboardKey.minus)) {
      zoomOut();
    }
    if (key.isKeyPressed(LogicalKeyboardKey.equal)) {
      zoomIn();
    }
    // Directional Keys
    if (key.isKeyPressed(LogicalKeyboardKey.arrowLeft)) {
      offset = offset + Offset(offsetAdjust, 0.0);
    }
    if (key.isKeyPressed(LogicalKeyboardKey.arrowRight)) {
      offset = offset + Offset(-offsetAdjust, 0.0);
    }
    if (key.isKeyPressed(LogicalKeyboardKey.arrowUp)) {
      offset = offset + Offset(0.0, offsetAdjust);
    }
    if (key.isKeyPressed(LogicalKeyboardKey.arrowDown)) {
      offset = offset + Offset(0.0, -offsetAdjust);
    }

    _shiftPressed = key.isShiftPressed;

    /// Update Controller Instance
    add(this);
  }

  /// Called every time a new finger touches the screen
  void addTouch(int pointer, Offset offsetVal, Offset globalVal) {}

  /// Called when any of the fingers update position
  void updateTouch(int pointer, Offset offsetVal, Offset globalVal) {}

  /// Called when a finger is removed from the screen
  void removeTouch(int pointer) {}

  /// Checks if the shift key on the keyboard is pressed
  bool get shiftPressed =&gt; _shiftPressed;
  bool _shiftPressed = false;

  /// Scale of the canvas
  double get scale =&gt; _scale;
  double _scale = 1;
  set scale(double value) =&gt; _update(() {
        _scale = value;
      });

  /// Max possible scale
  static const double maxScale = 3.0;

  /// Min possible scale
  static const double minScale = 0.2;

  /// How much to scale the canvas in increments
  static const double scaleAdjust = 0.05;

  /// How much to shift the canvas in increments
  static const double offsetAdjust = 15;

  /// Current offset of the canvas
  Offset get offset =&gt; _offset;
  Offset _offset = Offset.zero;
  set offset(Offset value) =&gt; _update(() {
        _offset = value;
      });

  static const double _scaleDefault = 1;
  static const Offset _offsetDefault = Offset.zero;

  /// Reset the canvas zoom and offset
  void reset() {
    scale = _scaleDefault;
    offset = _offsetDefault;
  }

  /// Zoom in the canvas
  void zoomIn() {
    scale += scaleAdjust;
  }

  /// Zoom out the canvas
  void zoomOut() {
    scale -= scaleAdjust;
  }

  void _update(void Function() action) {
    action();
    add(this);
  }
}</code></pre>
<p>Now when you run the application you can control the zoom and pan with just a keyboard. This could be useful for a fallback input that would work on a TV for example…</p>
<p>If you want to see if it is actually scaling proportionally then add the following the home screen:</p>
<pre><code class="dart language-dart">import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';

import '../../src/classes/canvas_object.dart';
import '../../src/controllers/canvas.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({Key key}) : super(key: key);

  @override
  _HomeScreenState createState() =&gt; _HomeScreenState();
}

class _HomeScreenState extends State&lt;HomeScreen&gt; {
  final _controller = CanvasController();

  @override
  void initState() {
    _controller.init();
    _dummyData();
    super.initState();
  }

  void _dummyData() {
    _controller.addObject(
      CanvasObject(
        dx: 20,
        dy: 20,
        width: 100,
        height: 100,
        child: Container(color: Colors.red),
      ),
    );
    _controller.addObject(
      CanvasObject(
        dx: 80,
        dy: 60,
        width: 100,
        height: 200,
        child: Container(color: Colors.green),
      ),
    );
    _controller.addObject(
      CanvasObject(
        dx: 100,
        dy: 40,
        width: 100,
        height: 50,
        child: Container(color: Colors.blue),
      ),
    );
  }

  @override
  void dispose() {
    _controller.close();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return StreamBuilder&lt;CanvasController&gt;(
        stream: _controller.stream,
        builder: (context, snapshot) {
          if (!snapshot.hasData) {
            return Scaffold(
              appBar: AppBar(),
              body: Center(child: CircularProgressIndicator()),
            );
          }
          final instance = snapshot.data;
          return Scaffold(
            appBar: AppBar(
              actions: [
                FocusScope(
                  canRequestFocus: false,
                  child: IconButton(
                    tooltip: 'Zoom In',
                    icon: Icon(Icons.zoom_in),
                    onPressed: _controller.zoomIn,
                  ),
                ),
                FocusScope(
                  canRequestFocus: false,
                  child: IconButton(
                    tooltip: 'Zoom Out',
                    icon: Icon(Icons.zoom_out),
                    onPressed: _controller.zoomOut,
                  ),
                ),
                FocusScope(
                  canRequestFocus: false,
                  child: IconButton(
                    tooltip: 'Reset the Scale and Offset',
                    icon: Icon(Icons.restore),
                    onPressed: _controller.reset,
                  ),
                ),
              ],
            ),
            body: Listener(
              behavior: HitTestBehavior.opaque,
              onPointerSignal: (details) {
                if (details is PointerScrollEvent) {
                  GestureBinding.instance.pointerSignalResolver
                      .register(details, (event) {
                    if (event is PointerScrollEvent) {
                      if (_controller.shiftPressed) {
                        double zoomDelta = (-event.scrollDelta.dy / 300);
                        _controller.scale = _controller.scale + zoomDelta;
                      } else {
                        _controller.offset =
                            _controller.offset - event.scrollDelta;
                      }
                    }
                  });
                }
              },
              onPointerMove: (details) {
                _controller.updateTouch(
                  details.pointer,
                  details.localPosition,
                  details.position,
                );
              },
              onPointerDown: (details) {
                _controller.addTouch(
                  details.pointer,
                  details.localPosition,
                  details.position,
                );
              },
              onPointerUp: (details) {
                _controller.removeTouch(details.pointer);
              },
              onPointerCancel: (details) {
                _controller.removeTouch(details.pointer);
              },
              child: RawKeyboardListener(
                autofocus: true,
                focusNode: _controller.focusNode,
                onKey: (key) =&gt; _controller.rawKeyEvent(context, key),
                child: SizedBox.expand(
                  child: Stack(
                    children: [
                      for (final object in instance.objects)
                        AnimatedPositioned.fromRect(
                          duration: const Duration(milliseconds: 50),
                          rect: object.rect.adjusted(
                            _controller.offset,
                            _controller.scale,
                          ),
                          child: FittedBox(
                            fit: BoxFit.fill,
                            child: SizedBox.fromSize(
                              size: object.size,
                              child: object.child,
                            ),
                          ),
                        )
                    ],
                  ),
                ),
              ),
            ),
          );
        });
  }
}

extension RectUtils on Rect {
  Rect adjusted(Offset offset, double scale) {
    final left = (this.left + offset.dx) * scale;
    final top = (this.top + offset.dy) * scale;
    final width = this.width * scale;
    final height = this.height * scale;
    return Rect.fromLTWH(left, top, width, height);
  }
}</code></pre>
<p>You can zoom and the blocks all scale correctly and pan around.</p>
<p>Just press the reset button to start over.</p>
<h3 id="part-7---multi-touch-input">Part 7 - Multi Touch Input</h3>
<p>Now time for the fingers. For this you will need a touchscreen device to test. You can plug in your phone or if you have a touch screen computer you can run the web version. Update the controller with following:</p>
<pre><code class="dart language-dart">import 'dart:async';
import 'dart:math' as math;

import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

import '../classes/canvas_object.dart';
import '../classes/rect_points.dart';

/// Control the canvas and the objects on it
class CanvasController {
  /// Controller for the stream output
  final _controller = StreamController&lt;CanvasController&gt;();

  /// Reference to the stream to update the UI
  Stream&lt;CanvasController&gt; get stream =&gt; _controller.stream;

  /// Emit a new event to rebuild the UI
  void add([CanvasController val]) =&gt; _controller.add(val ?? this);

  /// Stop the stream and finish
  void close() {
    _controller.close();
    focusNode.dispose();
  }

  /// Start the stream
  void init() =&gt; add();

  // -- Canvas Objects --

  final List&lt;CanvasObject&lt;Widget&gt;&gt; _objects = [];

  /// Current Objects on the canvas
  List&lt;CanvasObject&lt;Widget&gt;&gt; get objects =&gt; _objects;

  /// Add an object to the canvas
  void addObject(CanvasObject&lt;Widget&gt; value) =&gt; _update(() {
        _objects.add(value);
      });

  /// Add an object to the canvas
  void updateObject(int i, CanvasObject&lt;Widget&gt; value) =&gt; _update(() {
        _objects[i] = value;
      });

  /// Remove an object from the canvas
  void removeObject(int i) =&gt; _update(() {
        _objects.removeAt(i);
      });

  /// Focus node for listening for keyboard shortcuts
  final focusNode = FocusNode();

  /// Raw events from keys pressed
  void rawKeyEvent(BuildContext context, RawKeyEvent key) {
    // Scale keys
    if (key.isKeyPressed(LogicalKeyboardKey.minus)) {
      zoomOut();
    }
    if (key.isKeyPressed(LogicalKeyboardKey.equal)) {
      zoomIn();
    }
    // Directional Keys
    if (key.isKeyPressed(LogicalKeyboardKey.arrowLeft)) {
      offset = offset + Offset(offsetAdjust, 0.0);
    }
    if (key.isKeyPressed(LogicalKeyboardKey.arrowRight)) {
      offset = offset + Offset(-offsetAdjust, 0.0);
    }
    if (key.isKeyPressed(LogicalKeyboardKey.arrowUp)) {
      offset = offset + Offset(0.0, offsetAdjust);
    }
    if (key.isKeyPressed(LogicalKeyboardKey.arrowDown)) {
      offset = offset + Offset(0.0, -offsetAdjust);
    }

    _shiftPressed = key.isShiftPressed;
    _metaPressed = key.isMetaPressed;

    /// Update Controller Instance
    add(this);
  }

  /// Trigger Shift Press
  void shiftSelect() {
    _shiftPressed = true;
  }

  /// Trigger Meta Press
  void metaSelect() {
    _metaPressed = true;
  }

  final Map&lt;int, Offset&gt; _pointerMap = {};

  /// Number of inputs currently on the screen
  int get touchCount =&gt; _pointerMap.values.length;

  /// Marquee selection on the canvas
  RectPoints get marquee =&gt; _marquee;
  RectPoints _marquee;

  /// Dragging a canvas object
  bool get isMovingCanvasObject =&gt; _isMovingCanvasObject;
  bool _isMovingCanvasObject = false;

  final List&lt;int&gt; _selectedObjects = [];
  List&lt;int&gt; get selectedObjectsIndices =&gt; _selectedObjects;
  List&lt;CanvasObject&lt;Widget&gt;&gt; get selectedObjects =&gt;
      _selectedObjects.map((i) =&gt; _objects[i]).toList();
  bool isObjectSelected(int i) =&gt; _selectedObjects.contains(i);

  /// Called every time a new input touches the screen
  void addTouch(int pointer, Offset offsetVal, Offset globalVal) {
    _pointerMap[pointer] = offsetVal;

    if (shiftPressed) {
      final pt = (offsetVal / scale) - (offset);
      _marquee = RectPoints(pt, pt);
    }

    /// Update Controller Instance
    add(this);
  }

  /// Called when any of the inputs update position
  void updateTouch(int pointer, Offset offsetVal, Offset globalVal) {
    if (_marquee != null) {
      // Update New Widget Rect
      final _pts = _marquee;
      final a = _pointerMap.values.first;
      _pointerMap[pointer] = offsetVal;
      final b = _pointerMap.values.first;
      final delta = (b - a) / scale;
      _pts.end = _pts.end + delta;
      _marquee = _pts;
      final _rect = Rect.fromPoints(_pts.start, _pts.end);
      _selectedObjects.clear();
      for (var i = 0; i &lt; _objects.length; i++) {
        if (_rect.overlaps(_objects[i].rect)) {
          _selectedObjects.add(i);
        }
      }
    } else if (touchCount == 1) {
      // Widget Move
      _isMovingCanvasObject = true;
      final a = _pointerMap.values.first;
      _pointerMap[pointer] = offsetVal;
      final b = _pointerMap.values.first;
      if (_selectedObjects.isEmpty) return;
      for (final idx in _selectedObjects) {
        final widget = _objects[idx];
        final delta = (b - a) / scale;
        final _newOffset = widget.offset + delta;
        _objects[idx] = widget.copyWith(dx: _newOffset.dx, dy: _newOffset.dy);
      }
    } else if (touchCount == 2) {
      // Scale and Rotate Update
      _isMovingCanvasObject = false;
      final _rectA = _getRectFromPoints(_pointerMap.values.toList());
      _pointerMap[pointer] = offsetVal;
      final _rectB = _getRectFromPoints(_pointerMap.values.toList());
      final _delta = _rectB.center - _rectA.center;
      final _newOffset = offset + (_delta / scale);
      offset = _newOffset;
      final aDistance = (_rectA.topLeft - _rectA.bottomRight).distance;
      final bDistance = (_rectB.topLeft - _rectB.bottomRight).distance;
      final change = (bDistance / aDistance);
      scale = scale * change;
    } else {
      // Pan Update
      _isMovingCanvasObject = false;
      final _rectA = _getRectFromPoints(_pointerMap.values.toList());
      _pointerMap[pointer] = offsetVal;
      final _rectB = _getRectFromPoints(_pointerMap.values.toList());
      final _delta = _rectB.center - _rectA.center;
      offset = offset + (_delta / scale);
    }
    _pointerMap[pointer] = offsetVal;

    /// Update Controller Instance
    add(this);
  }

  /// Called when a input is removed from the screen
  void removeTouch(int pointer) {
    _pointerMap.remove(pointer);

    if (touchCount &lt; 1) {
      _isMovingCanvasObject = false;
    }
    if (_marquee != null) {
      _marquee = null;
      _shiftPressed = false;
    }

    /// Update Controller Instance
    add(this);
  }

  void selectObject(int i) =&gt; _update(() {
        if (!_metaPressed) {
          _selectedObjects.clear();
        }
        _selectedObjects.add(0);
        final item = _objects.removeAt(i);
        _objects.insert(0, item);
      });

  /// Checks if the shift key on the keyboard is pressed
  bool get shiftPressed =&gt; _shiftPressed;
  bool _shiftPressed = false;

  /// Checks if the meta key on the keyboard is pressed
  bool get metaPressed =&gt; _metaPressed;
  bool _metaPressed = false;

  /// Scale of the canvas
  double get scale =&gt; _scale;
  double _scale = 1;
  set scale(double value) =&gt; _update(() {
        if (value &lt;= minScale) {
          value = minScale;
        } else if (value &gt;= maxScale) {
          value = maxScale;
        }
        _scale = value;
      });

  /// Max possible scale
  static const double maxScale = 3.0;

  /// Min possible scale
  static const double minScale = 0.2;

  /// How much to scale the canvas in increments
  static const double scaleAdjust = 0.05;

  /// How much to shift the canvas in increments
  static const double offsetAdjust = 15;

  /// Current offset of the canvas
  Offset get offset =&gt; _offset;
  Offset _offset = Offset.zero;
  set offset(Offset value) =&gt; _update(() {
        _offset = value;
      });

  static const double _scaleDefault = 1;
  static const Offset _offsetDefault = Offset.zero;

  /// Reset the canvas zoom and offset
  void reset() {
    scale = _scaleDefault;
    offset = _offsetDefault;
  }

  /// Zoom in the canvas
  void zoomIn() {
    scale += scaleAdjust;
  }

  /// Zoom out the canvas
  void zoomOut() {
    scale -= scaleAdjust;
  }

  void _update(void Function() action) {
    action();
    add(this);
  }

  Rect _getRectFromPoints(List&lt;Offset&gt; offsets) {
    if (offsets.length == 2) {
      return Rect.fromPoints(offsets.first, offsets.last);
    }
    final dxs = offsets.map((e) =&gt; e.dx).toList();
    final dys = offsets.map((e) =&gt; e.dy).toList();
    double left = _minFromList(dxs);
    double top = _minFromList(dys);
    double bottom = _maxFromList(dys);
    double right = _maxFromList(dxs);
    return Rect.fromLTRB(left, top, right, bottom);
  }

  double _minFromList(List&lt;double&gt; values) {
    double value = double.infinity;
    for (final item in values) {
      value = math.min(item, value);
    }
    return value;
  }

  double _maxFromList(List&lt;double&gt; values) {
    double value = -double.infinity;
    for (final item in values) {
      value = math.max(item, value);
    }
    return value;
  }
}</code></pre>
<p>Add a new file <code>src/classes/rect_points.dart</code> and add the following:</p>
<pre><code class="dart language-dart">import 'dart:ui';

class RectPoints {
  RectPoints(this.start, this.end);

  Offset start, end;

  Rect get rect =&gt; Rect.fromPoints(start, end);
}</code></pre>
<p>Update the <code>main.dart</code> with the following:</p>
<pre><code class="dart language-dart">import 'package:flutter/material.dart';

import 'ui/home/screen.dart';

void main() =&gt; runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        accentColor: Colors.red,
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      darkTheme: ThemeData.dark().copyWith(
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: HomeScreen(),
    );
  }
}</code></pre>
<p>Update the home screen with the following:</p>
<pre><code class="dart language-dart">import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';

import '../../src/classes/canvas_object.dart';
import '../../src/controllers/canvas.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({Key key}) : super(key: key);

  @override
  _HomeScreenState createState() =&gt; _HomeScreenState();
}

class _HomeScreenState extends State&lt;HomeScreen&gt; {
  final _controller = CanvasController();

  @override
  void initState() {
    _controller.init();
    _dummyData();
    super.initState();
  }

  void _dummyData() {
    _controller.addObject(
      CanvasObject(
        dx: 20,
        dy: 20,
        width: 100,
        height: 100,
        child: Container(color: Colors.red),
      ),
    );
    _controller.addObject(
      CanvasObject(
        dx: 80,
        dy: 60,
        width: 100,
        height: 200,
        child: Container(color: Colors.green),
      ),
    );
    _controller.addObject(
      CanvasObject(
        dx: 100,
        dy: 40,
        width: 100,
        height: 50,
        child: Container(color: Colors.blue),
      ),
    );
  }

  @override
  void dispose() {
    _controller.close();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return StreamBuilder&lt;CanvasController&gt;(
        stream: _controller.stream,
        builder: (context, snapshot) {
          if (!snapshot.hasData) {
            return Scaffold(
              appBar: AppBar(),
              body: Center(child: CircularProgressIndicator()),
            );
          }
          final instance = snapshot.data;
          return Scaffold(
            appBar: AppBar(
              actions: [
                FocusScope(
                  canRequestFocus: false,
                  child: IconButton(
                    tooltip: 'Selection',
                    icon: Icon(Icons.select_all),
                    color: instance.shiftPressed
                        ? Theme.of(context).accentColor
                        : null,
                    onPressed: _controller.shiftSelect,
                  ),
                ),
                FocusScope(
                  canRequestFocus: false,
                  child: IconButton(
                    tooltip: 'Meta Key',
                    color: instance.metaPressed
                        ? Theme.of(context).accentColor
                        : null,
                    icon: Icon(Icons.category),
                    onPressed: _controller.metaSelect,
                  ),
                ),
                FocusScope(
                  canRequestFocus: false,
                  child: IconButton(
                    tooltip: 'Zoom In',
                    icon: Icon(Icons.zoom_in),
                    onPressed: _controller.zoomIn,
                  ),
                ),
                FocusScope(
                  canRequestFocus: false,
                  child: IconButton(
                    tooltip: 'Zoom Out',
                    icon: Icon(Icons.zoom_out),
                    onPressed: _controller.zoomOut,
                  ),
                ),
                FocusScope(
                  canRequestFocus: false,
                  child: IconButton(
                    tooltip: 'Reset the Scale and Offset',
                    icon: Icon(Icons.restore),
                    onPressed: _controller.reset,
                  ),
                ),
              ],
            ),
            body: Listener(
              behavior: HitTestBehavior.opaque,
              onPointerSignal: (details) {
                if (details is PointerScrollEvent) {
                  GestureBinding.instance.pointerSignalResolver
                      .register(details, (event) {
                    if (event is PointerScrollEvent) {
                      if (_controller.shiftPressed) {
                        double zoomDelta = (-event.scrollDelta.dy / 300);
                        _controller.scale = _controller.scale + zoomDelta;
                      } else {
                        _controller.offset =
                            _controller.offset - event.scrollDelta;
                      }
                    }
                  });
                }
              },
              onPointerMove: (details) {
                _controller.updateTouch(
                  details.pointer,
                  details.localPosition,
                  details.position,
                );
              },
              onPointerDown: (details) {
                _controller.addTouch(
                  details.pointer,
                  details.localPosition,
                  details.position,
                );
              },
              onPointerUp: (details) {
                _controller.removeTouch(details.pointer);
              },
              onPointerCancel: (details) {
                _controller.removeTouch(details.pointer);
              },
              child: RawKeyboardListener(
                autofocus: true,
                focusNode: _controller.focusNode,
                onKey: (key) =&gt; _controller.rawKeyEvent(context, key),
                child: SizedBox.expand(
                  child: Stack(
                    children: [
                      for (var i = 0; i &lt; instance.objects.length; i++)
                        Positioned.fromRect(
                          rect: instance.objects[i].rect.adjusted(
                            _controller.offset,
                            _controller.scale,
                          ),
                          child: Container(
                            decoration: BoxDecoration(
                                border: Border.all(
                              color: instance.isObjectSelected(i)
                                  ? Colors.grey
                                  : Colors.transparent,
                            )),
                            child: GestureDetector(
                              onTapDown: (_) =&gt; _controller.selectObject(i),
                              child: FittedBox(
                                fit: BoxFit.fill,
                                child: SizedBox.fromSize(
                                  size: instance.objects[i].size,
                                  child: instance.objects[i].child,
                                ),
                              ),
                            ),
                          ),
                        ),
                      if (instance?.marquee != null)
                        Positioned.fromRect(
                          rect: instance.marquee.rect
                              .adjusted(instance.offset, instance.scale),
                          child: Container(
                            color: Colors.blueAccent.withOpacity(0.3),
                          ),
                        ),
                    ],
                  ),
                ),
              ),
            ),
          );
        });
  }
}

extension RectUtils on Rect {
  Rect adjusted(Offset offset, double scale) {
    final left = (this.left + offset.dx) * scale;
    final top = (this.top + offset.dy) * scale;
    final width = this.width * scale;
    final height = this.height * scale;
    return Rect.fromLTWH(left, top, width, height);
  }
}</code></pre>
<p>Now you can move any object on the canvas just by clicking and dragging. You can zoom with 2 fingers and pan with 2 or 3 fingers. If you hold down the shift key then you can use a marquee to select multiple and if you hold down the meta/command key then you can select multiple by tapping each. </p>
<h3 id="conclusion">Conclusion</h3>
<p>If you are on a device without a keyboard you can tap the new icons to turn on the keyboard key actions. When the object is selected there is a grey border.</p>
<p>Now you can add any widget to the canvas and pan and zoom!</p>]]></content:encoded>
            <category>flutter-multi-touch-canvas.md</category>
        </item>
        <item>
            <title><![CDATA[Flutter + Fastlane (One Click Beta)]]></title>
            <link>https://rodydavis.com/#/blog/assets/blog/flutter-one-click-release</link>
            <guid>assets/blog/flutter-one-click-release</guid>
            <pubDate>Mon, 11 Mar 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[3 min read]]></description>
            <content:encoded><![CDATA[<h2 id="flutter--fastlane-one-click-beta">Flutter + Fastlane (One Click Beta)</h2>
<h3 id="1-install-flutter">1. Install Flutter</h3>
<p><a href="https://flutter.io/get-started/install/" rel="noopener noreferrer" target="_blank">Download Flutter</a></p>
<p><img src="/images/flutter/logo.jpg" alt="flutter" /></p>
<h3 id="2-create-new-flutter-project">2. Create new Flutter Project</h3>
<p>If you are pretty new to Flutter you can check out <a href="https://flutter.io/get-started/codelab/" rel="noopener noreferrer" target="_blank">this useful guide</a> on how to create a new project step by step. </p>
<p><img src="/images/flutter/cross-platform.jpg" alt="cross-platform" /></p>
<h3 id="3-create-app-in-itunes-connect">3. Create App in iTunes Connect</h3>
<p>If you are not familiar with iTunes Connect, check out <a href="https://clearbridgemobile.com/how-to-submit-an-app-to-the-app-store/" rel="noopener noreferrer" target="_blank">this article</a> for getting started and setting up your first app for the App Store. </p>
<h3 id="4-create-app-in-google-play">4. Create App in Google Play</h3>
<p>Setting up an app in the Google Play Console can be tricky, make sure to check out the <a href="https://support.google.com/googleplay/android-developer/answer/113469?hl=en-GB" rel="noopener noreferrer" target="_blank">official reference</a> and <a href="https://medium.com/mindorks/upload-your-first-android-app-on-play-store-step-by-step-ee0de9123ac0" rel="noopener noreferrer" target="_blank">this guide</a> if you are having trouble. </p>
<p><img src="/images/flutter/fastlane.jpg" alt="fastlane" /></p>
<h3 id="5-navigate-to-project--ios-and-setup-fastlane">5. Navigate to Project &gt; ios and Setup Fastlane</h3>
<p><a href="https://docs.fastlane.tools/getting-started/ios/setup/" rel="noopener noreferrer" target="_blank">Reference</a></p>
<h3 id="6-navigate-to-project--android-and-setup-fastlane">6. Navigate to Project &gt; android and Setup Fastlane</h3>
<p><a href="https://docs.fastlane.tools/getting-started/android/setup/" rel="noopener noreferrer" target="_blank">Reference</a></p>
<h3 id="7-update-fastlane-fastfiles-for-ios-and-android-and-change-accordingly-for-each-platform">7. Update Fastlane Fastfiles for iOS and Android and Change accordingly for each platform</h3>
<ul>
<li><p>Make sure to change <YOUR PROJECT PATH> to the path to your project in Finder.</p></li>
<li><p>Only copy the correct platform code for each Fastfile. For example, <code>default_platform(:ios)</code> for iOS and `default_platform(:android)1st for Android.</p></li>
</ul>
<pre><code class="ruby language-ruby">update_fastlane

default_platform(:ios)

platform :ios do
  desc "Push a new beta build to TestFlight"
  lane :beta do
    increment_build_number(xcodeproj: "Runner.xcodeproj")
    build_app(workspace: "Runner.xcworkspace", scheme: "Runner")
    upload_to_testflight(skip_waiting_for_build_processing: true)
  end
  desc "Push a new release build to the App Store"
  lane :release do  
    increment_build_number(xcodeproj: "Runner.xcodeproj")
    build_app(workspace: "Runner.xcworkspace", scheme: "Runner")
    upload_to_app_store(submit_for_review: true,
                            automatic_release: true,
                            skip_screenshots: true,
                            force: true,
                            skip_waiting_for_build_processing: true)
  end
end



//&lt;YOUR PROJECT PATH&gt; &gt; android &gt; fastlane &gt; Fastfile
default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Submit a new Build to Beta"
  lane :beta do
    gradle(task: 'clean')
    increment_version_code
    sh "cd &lt;YOUR PROJECT PATH&gt; &amp;&amp; flutter build apk"
    upload_to_play_store(
      track: 'beta',
      apk: '../build/app/outputs/apk/release/app-release.apk',
      skip_upload_screenshots: true,
      skip_upload_images: true
    )
    # crashlytics
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: 'clean')
    increment_version_code
    sh "cd &lt;YOUR PROJECT PATH&gt; &amp;&amp; flutter build apk"
    upload_to_play_store(
      track: 'production',
      apk: '../build/app/outputs/apk/release/app-release.apk',
      skip_upload_screenshots: true,
      skip_upload_images: true
    )
  end
end</code></pre>
<ul>
<li>For Android <code>increment_version_code</code> install here.  </li>
</ul>
<p>Sometimes it will fail and you will need to run:</p>
<p><code>bundle exec fastlane add_plugin increment_version_code</code></p>
<ul>
<li>For iOS <code>increment_build_number</code> set up Generic Versioning by enabling the agvtool. </li>
</ul>
<p><img src="/images/flutter/version-bump.gif" alt="version-bump" /><br />
<a href="https://medium.com/xcblog/agvtool-automating-ios-build-and-version-numbers-454cab6f1bbe" rel="noopener noreferrer" target="_blank">Source</a></p>
<h3 id="8-metadata-optional">8. Metadata (Optional)</h3>
<ul>
<li>For iOS you can have Fastlane download all your apps existing metadata including screenshots from iTunes Connect. In terminal navigate to the project and run.</li>
</ul>
<p><code>fastlane deliver download_metadata &amp;&amp; fastlane deliver download_screenshots</code></p>
<ul>
<li>For Android you can use <a href="https://docs.fastlane.tools/actions/supply/" rel="noopener noreferrer" target="_blank">Fastlane Supply</a>. </li>
</ul>
<h3 id="9-open-automator">9. Open Automator</h3>
<p>Right now everything is working just by the command line. If you navigate to your project in terminal by adding "cd " and dragging in the project folder and hitting Enter, you can type "cd ios &amp;&amp; fastlane beta" or "cd android &amp;&amp; fastlane beta" and both will run fastlane.</p>
<p><img src="/images/flutter/terminal-drag.gif" alt="terminal" /></p>
<p>If you want to be able to submit your app to Google Play and the App Store with one click we will be using <a href="http://www.applegazette.com/os-x/getting-started-automator-workflows-mac/" rel="noopener noreferrer" target="_blank">Automator</a>. Create a new Automator Application. And Search for "Ask for Confirmation" and "Run AppleScript" and drag in.</p>
<p><img src="/images/flutter/automator.jpg" alt="fastlane" /></p>
<p>Here is the Script for beta and release. You will need to create a Automator Application for both Beta and Release for each app you want automated. Save it where ever you want and create an Alias to be but on the Desktop.</p>
<ul>
<li>Make sure to change <YOUR PROJECT PATH> to the path to your project in Finder</li>
</ul>
<p>Hint: I have my automator application save in the Github Repo of my project for versioning and easy access for different projects. </p>
<pre><code class="ruby language-ruby">//Beta
on run {input, parameters}
    tell application "Terminal"
        activate
        do script "cd &lt;YOUR PROJECT PATH&gt;/android &amp;&amp; fastlane beta &amp;&amp; cd &lt;YOUR PROJECT PATH&gt;/ios &amp;&amp; fastlane beta"
    end tell
    tell application "System Events"
        try
            set visible of application process "Terminal" to false
        end try
    end tell
end run

//Release
on run {input, parameters}
    tell application "Terminal"
        activate
        do script "cd &lt;YOUR PROJECT PATH&gt;/android &amp;&amp; fastlane deploy &amp;&amp; cd &lt;YOUR PROJECT PATH&gt;/ios &amp;&amp; fastlane release"
    end tell
    tell application "System Events"
        try
            set visible of application process "Terminal" to false
        end try
    end tell
end run</code></pre>
<h3 id="10-try-it-out">10. Try It Out!</h3>
<p>Everything should be working now. If you double click on the automator application you should get a confirmation pop up to release the app. The Script will run terminal in the background and you can stay focused on developing awesome flutter applications. If you want to see the progress on fastlane uploading your apps you can click on the terminal icon and the terminal window will reappear. Thanks for reading and please reach out for any questions you have!</p>]]></content:encoded>
            <category>flutter-one-click-release.md</category>
            <enclosure url="https://rodydavis.com/images/flutter/logo.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Host your Flutter Project as a REST API]]></title>
            <link>https://rodydavis.com/#/blog/assets/blog/host-flutter-rest-api</link>
            <guid>assets/blog/host-flutter-rest-api</guid>
            <pubDate>Fri, 18 Oct 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[9 min read]]></description>
            <content:encoded><![CDATA[<h2 id="host-your-flutter-project-as-a-rest-api">Host your Flutter Project as a REST API</h2>
<p>After you build your flutter project you may want to reuse the models and business logic from your lib folder. I will show you how to go about setting up the project to have iOS, Android, Web, Windows, MacOS, Linux and a REST API interface with one project. The REST API can also be deploy to Google Cloud Run for Dart everywhere.</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*_pGj3DixmBImxcAl_HWWdA.gif" alt="" /></p>
<blockquote>
  <p>One Codebase for Client and Sever.</p>
</blockquote>
<p>This will allow you to expose your Dart models as a REST API and run your business logic from your lib folder while the application runs the models as they are. <a href="https://github.com/AppleEducate/shared_dart" rel="noopener noreferrer" target="_blank">Here</a> is the final project.</p>
<h3 id="setting-up">Setting Up</h3>
<p>As with any Flutter project I am going to assume that you already have <a href="https://flutter.dev/" rel="noopener noreferrer" target="_blank">Flutter</a> installed on your machine and that you can create a project. This is a intermediate level difficulty so read on if you are up to the challenge. You will also need to know the basics of <a href="https://www.docker.com/" rel="noopener noreferrer" target="_blank">Docker</a>.</p>
<h3 id="why-one-project">Why one project?</h3>
<p>It may not be obvious but when building complex applications you will at some point have a server and an application that calls that server. <a href="https://firebase.google.com/" rel="noopener noreferrer" target="_blank">Firebase</a> is an excellent option for doing this and I use it in almost all my projects. <a href="https://firebase.google.com/products/functions/" rel="noopener noreferrer" target="_blank">Firebase Functions</a> are really powerful but you are limited by Javascript or Typescript. What if you could use the same packages that you are using in the Flutter project, or better yet what if they both used the same?</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*1xVIzjzgJnmuWTJoaG3kAQ.gif" alt="" /></p>
<p>When you have a server project and a client project that communicate over a rest api or client sdk like Firebase then you will run into the problem that the server has models of objects stored and the client has models of the objects that are stored. This can lead to a serious mismatch when it changed without you knowing. GraphQL helps a lot with this since you define the model that you recieve. This approach allows your business logic to be always up to date for both the client and server.</p>
<h3 id="client-setup">Client Setup</h3>
<p>The first step is to just build your application. The only difference that we will make is keeping the UI and business logic separate. When starting out with Flutter it can be very easy to throw all the logic into the screen and calling setState when the data changes. Even the application when creating a new Flutter project does this. That's why <a href="https://flutter.dev/docs/development/data-and-backend/state-mgmt/options" rel="noopener noreferrer" target="_blank">choosing a state management solution </a>is so important.</p>
<iframe src="https://medium.com/media/64311732193c2dd39b2cdbc42965b538" frameborder=0></iframe>
<p>To make things clean and concise we will make 2 folders in our lib folder.</p>
<ul>
<li><p>ui for all Flutter Widgets and Screens</p></li>
<li><p>src for all business logic, classes, models and utility functions</p></li>
</ul>
<p>This will leave us with main.dart being only the entry point into our client application.</p>
<pre><code>import 'package:flutter/material.dart';

import 'plugins/desktop/desktop.dart';
import 'ui/home/screen.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  [@override](http://twitter.com/override)
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData.light(),
      darkTheme: ThemeData.dark(),
      home: HomeScreen(),
    );
  }
}</code></pre>
<p>Let’s Start by making a tab bar for the 2 screens. Create a file in the folder ui/home/screen.dart and add the following:</p>
<pre><code>import 'package:flutter/material.dart';

import '../counter/screen.dart';
import '../todo/screen.dart';

class HomeScreen extends StatefulWidget {
  [@override](http://twitter.com/override)
  _HomeScreenState createState() =&gt; _HomeScreenState();
}

class _HomeScreenState extends State&lt;HomeScreen&gt; {
  int _currentIndex = 0;

[@override](http://twitter.com/override)
  Widget build(BuildContext context) {
    return Scaffold(
      body: IndexedStack(
        index: _currentIndex,
        children: &lt;Widget&gt;[
          CounterScreen(),
          TodosScreen(),
        ],
      ),
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _currentIndex,
        onTap: (val) {
          if (mounted)
            setState(() {
              _currentIndex = val;
            });
        },
        type: BottomNavigationBarType.fixed,
        items: [
          BottomNavigationBarItem(
            icon: Icon(Icons.add),
            title: Text('Counter'),
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.list),
            title: Text('Todos'),
          ),
        ],
      ),
    );
  }
}</code></pre>
<p>This is just a basic screen and should look very normal.</p>
<h4 id="counter-example">Counter Example</h4>
<p><img src="https://cdn-images-1.medium.com/max/2336/1*qFZepZBtk0RhEojjGsI85g.png" alt="" /></p>
<p>Now create a file ui/counter/screen.dart and add the following:</p>
<pre><code>import 'package:flutter/material.dart';
import 'package:shared_dart/src/models/counter.dart';

class CounterScreen extends StatefulWidget {
  [@override](http://twitter.com/override)
  _CounterScreenState createState() =&gt; _CounterScreenState();
}

class _CounterScreenState extends State&lt;CounterScreen&gt; {
  CounterModel _counterModel = CounterModel();

void _incrementCounter() {
    setState(() {
      // This call to setState tells the Flutter framework that something has
      // changed in this State, which causes it to rerun the build method below
      // so that the display can reflect the updated values. If we changed
      // _counter without calling setState(), then the build method would not be
      // called again, and so nothing would appear to happen.
      _counterModel.add();
    });
  }

[@override](http://twitter.com/override)
  Widget build(BuildContext context) {
    // This method is rerun every time setState is called, for instance as done
    // by the _incrementCounter method above.
    //
    // The Flutter framework has been optimized to make rerunning build methods
    // fast, so that you can just rebuild anything that needs updating rather
    // than having to individually change instances of widgets.
    return Scaffold(
      appBar: AppBar(
        // Here we take the value from the MyCounterPage object that was created by
        // the App.build method, and use it to set our appbar title.
        title: Text('Counter Screen'),
      ),
      body: Center(
        // Center is a layout widget. It takes a single child and positions it
        // in the middle of the parent.
        child: Column(
          // Column is also a layout widget. It takes a list of children and
          // arranges them vertically. By default, it sizes itself to fit its
          // children horizontally, and tries to be as tall as its parent.
          //
          // Invoke "debug painting" (press "p" in the console, choose the
          // "Toggle Debug Paint" action from the Flutter Inspector in Android
          // Studio, or the "Toggle Debug Paint" command in Visual Studio Code)
          // to see the wireframe for each widget.
          //
          // Column has various properties to control how it sizes itself and
          // how it positions its children. Here we use mainAxisAlignment to
          // center the children vertically; the main axis here is the vertical
          // axis because Columns are vertical (the cross axis would be
          // horizontal).
          mainAxisAlignment: MainAxisAlignment.center,
          children: &lt;Widget&gt;[
            Text(
              'You have pushed the button this many times:',
            ),
            Text(
              '${_counterModel.count}',
              style: Theme.of(context).textTheme.display1,
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: Icon(Icons.add),
      ), // This trailing comma makes auto-formatting nicer for build methods.
    );
  }
}</code></pre>
<p>This is the default counter app you get when you create a Flutter application but with one change, it uses <code>CounterModel</code> to hold the logic.</p>
<p>Create the counter model at src/models/counter.dart and add the following:</p>
<pre><code>class CounterModel {
  CounterModel();

int _count = 0;

int get count =&gt; _count;

void add() =&gt; _count++;

void subtract() =&gt; _count--;

void set(int val) =&gt; _count = val;
}</code></pre>
<p>As you can see it is really easy to expose only what we want to while still having complete flexibility. You could use provider here if you choose, or even bloc and/or streams.</p>
<h4 id="todo-example">Todo Example</h4>
<p><img src="https://cdn-images-1.medium.com/max/2336/1*47x4TDkyWCo8-qMCfYaeng.png" alt="" /></p>
<p>Lets create a file at ui/todos/screen.dart and add the following:</p>
<pre><code>import 'package:flutter/material.dart';

import '../../src/classes/todo.dart';
import '../../src/models/todos.dart';

class TodosScreen extends StatefulWidget {
  [@override](http://twitter.com/override)
  _TodosScreenState createState() =&gt; _TodosScreenState();
}

class _TodosScreenState extends State&lt;TodosScreen&gt; {
  final _model = TodosModel();
  List&lt;ToDo&gt; _todos;

[@override](http://twitter.com/override)
  void initState() {
    _model.getList().then((val) {
      if (mounted)
        setState(() {
          _todos = val;
        });
    });
    super.initState();
  }

[@override](http://twitter.com/override)
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Todos Screen'),
      ),
      body: Builder(
        builder: (_) {
          if (_todos != null) {
            return ListView.builder(
              itemCount: _todos.length,
              itemBuilder: (context, index) {
                final _item = _todos[index];
                return ListTile(
                  title: Text(_item.title),
                  subtitle: Text(_item.completed ? 'Completed' : 'Pending'),
                );
              },
            );
          }
          return Center(
            child: CircularProgressIndicator(),
          );
        },
      ),
    );
  }
}</code></pre>
<p>You will see that we have the logic in TodosModel and uses the class ToDo for toJson and fromJson.</p>
<p>Create a file at the location src/classes/todo.dart and add the following:</p>
<pre><code>// To parse this JSON data, do
//
//     final toDo = toDoFromJson(jsonString);

import 'dart:convert';

List&lt;ToDo&gt; toDoFromJson(String str) =&gt; List&lt;ToDo&gt;.from(json.decode(str).map((x) =&gt; ToDo.fromJson(x)));

String toDoToJson(List&lt;ToDo&gt; data) =&gt; json.encode(List&lt;dynamic&gt;.from(data.map((x) =&gt; x.toJson())));

class ToDo {
    int userId;
    int id;
    String title;
    bool completed;

ToDo({
        this.userId,
        this.id,
        this.title,
        this.completed,
    });

factory ToDo.fromJson(Map&lt;String, dynamic&gt; json) =&gt; ToDo(
        userId: json["userId"],
        id: json["id"],
        title: json["title"],
        completed: json["completed"],
    );

Map&lt;String, dynamic&gt; toJson() =&gt; {
        "userId": userId,
        "id": id,
        "title": title,
        "completed": completed,
    };
}</code></pre>
<p>and create the model src/models/todo.dart and add the following:</p>
<pre><code>import 'dart:convert';

import 'package:http/http.dart' as http;
import 'package:shared_dart/src/classes/todo.dart' as t;

class TodosModel {
  final kTodosUrl = '[https://jsonplaceholder.typicode.com/todos'](https://jsonplaceholder.typicode.com/todos');

Future&lt;List&lt;t.ToDo&gt;&gt; getList() async {
    final _response = await http.get(kTodosUrl);
    if (_response != null) {
      final _todos = t.toDoFromJson(_response.body);
      if (_todos != null) {
        return _todos;
      }
    }
    return [];
  }

Future&lt;t.ToDo&gt; getItem(int id) async {
    final _response = await http.get('$kTodosUrl/$id');
    if (_response != null) {
      final _todo = t.ToDo.fromJson(json.decode(_response.body));
      if (_todo != null) {
        return _todo;
      }
    }
    return null;
  }
}</code></pre>
<p>Here we just get dummy data from a url that emits json and convert them to our classes. This is an example I want to show with networking. There is only one place that fetches the data.</p>
<h4 id="run-the-project-web">Run the Project (Web)</h4>
<p><img src="https://cdn-images-1.medium.com/max/5248/1*et2kG6_skauXJ6rogFy_ZQ.png" alt="" /></p>
<p><img src="https://cdn-images-1.medium.com/max/5248/1*za20ru3G18DUFob07Cjv2A.png" alt="" /></p>
<p>As you can see when you run your project on chrome you will get the same application that you got on mobile. Even the networking is working in the web. You can call the model and retrieve the list just like you would expect.</p>
<h3 id="server-setup">Server Setup</h3>
<blockquote>
  <p>Now time for the magic..</p>
</blockquote>
<p>In the root of the project folder create a file Dockerfile and add the following:</p>
<pre><code># Use Google's official Dart image.
# [https://hub.docker.com/r/google/dart-runtime/](https://hub.docker.com/r/google/dart-runtime/)
FROM google/dart-runtime</code></pre>
<p>Create another file at the root called service.yaml and add the following:</p>
<pre><code>apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: PROJECT_NAME
  namespace: default
spec:
  template:
    spec:
      containers:
        - image: docker.io/YOUR_DOCKER_NAME/PROJECT_NAME
          env:
            - name: TARGET
              value: "PROJECT_NAME v1"</code></pre>
<p>Replace PROJECT_NAME with your project name, mine is shared-dart for this example.</p>
<p>You will also need to replace YOUR_DOCKER_NAME with your docker username so the container can be deployed correctly.</p>
<p>Update your pubspec.yaml with the following:</p>
<pre><code>name: shared_dart
description: A new Flutter project.
publish_to: none
version: 1.0.0+1

environment:
  sdk: "&gt;=2.1.0 &lt;3.0.0"

dependencies:
  flutter:
    sdk: flutter
  shelf: ^0.7.3
  cupertino_icons: ^0.1.2
  http: ^0.12.0+2

dev_dependencies:
  flutter_test:
    sdk: flutter

flutter:
  uses-material-design: true</code></pre>
<p>The important package here is shelf as it allows us to run a http server with dart.</p>
<p>Create a folder in the root of the project called bin then add a file server.dart and replace it with the following:</p>
<pre><code>import 'dart:io';

import 'package:shelf/shelf.dart' as shelf;
import 'package:shelf/shelf_io.dart' as io;

import 'src/routing.dart';

void main() {
  final handler = const shelf.Pipeline()
      .addMiddleware(shelf.logRequests())
      .addHandler(RouteUtils.handler);

final port = int.tryParse(Platform.environment['PORT'] ?? '8080');
  final address = InternetAddress.anyIPv4;

io.serve(handler, address, port).then((server) {
    server.autoCompress = true;
    print('Serving at [http://${server.address.host}:${server.port}'](http://${server.address.host}:${server.port}'));
  });
}</code></pre>
<p>This will tell the container what port to listen for and how to handle the requests.</p>
<p>Create a folder src in the bin folder and add a file routing.dart and replace the contents with the following:</p>
<pre><code>import 'dart:async';

import 'package:shelf/shelf.dart' as shelf;

import 'controllers/index.dart';
import 'result.dart';

class RouteUtils {
  static FutureOr&lt;shelf.Response&gt; handler(shelf.Request request) {
    var component = request.url.pathSegments.first;
    var handler = _handlers(request)[component];
    if (handler == null) return shelf.Response.notFound(null);
    return handler;
  }

static Map&lt;String, FutureOr&lt;shelf.Response&gt;&gt; _handlers(
      shelf.Request request) {
    return {
      'info': ServerResponse('Info', body: {
        "version": 'v1.0.0',
        "status": "ok",
      }).ok(),
      'counter': CounterController().result(request),
      'todos': TodoController().result(request),
    };
  }
}</code></pre>
<p>There is still nothing imported from our main project but you will start to see some similarities. Here we specify controllers for todos and counter url paths.</p>
<pre><code>'counter': CounterController().result(request),
'todos': TodoController().result(request),</code></pre>
<p>that means any url with the following:<a href="https://mydomain.com/todos" rel="noopener noreferrer" target="_blank">https://mydomain.com/todos</a> , <a href="https://mydomain.com/todos" rel="noopener noreferrer" target="_blank">https://mydomain.com/todos</a>/1</p>
<p>will get routed to the TodoController to handle the request.</p>
<blockquote>
  <p>This is also the first time I found out about FutureOr. It allows you to return a sync or async function.</p>
</blockquote>
<p>And important part about build a REST API is having a consistent response body, so here we can create a wrapper that adds fields we always want to return, like the status of the call, a message and the body.</p>
<p>Create a file at src/result.dart and add the following:</p>
<pre><code>import 'dart:convert';

import 'package:shelf/shelf.dart' as shelf;

class ServerResponse {
  final String message;
  final dynamic body;
  final StatusType type;

ServerResponse(
    this.message, {
    this.type = StatusType.success,
    this.body,
  });

Map&lt;String, dynamic&gt; toJson() {
    return {
      "status": type.toString().replaceAll('StatusType.', ''),
      "message": message,
      "body": body ?? '',
    };
  }

String toJsonString() {
    return json.encode(toJson());
  }

shelf.Response ok() {
    return shelf.Response.ok(
      toJsonString(),
      headers: {
        'Content-Type': 'application/json',
      },
    );
  }
}

enum StatusType { success, error }

abstract class ResponseImpl {
  Future&lt;shelf.Response&gt; result(shelf.Request request);
}</code></pre>
<p>This will always return json and the fields that we want to show. You could also include your paging meta data here.</p>
<p>Create a file in at the location src/controllers/counter.dart and add the following:</p>
<pre><code>import 'package:shared_dart/src/models/counter.dart';
import 'package:shelf/shelf.dart' as shelf;

import '../result.dart';

class CounterController implements ResponseImpl {
  const CounterController();

[@override](http://twitter.com/override)
  Future&lt;shelf.Response&gt; result(shelf.Request request) async {
    final _model = CounterModel();
    final _params = request.url.queryParameters;
    if (_params != null) {
      final _val = int.tryParse(_params['count'] ?? '0');
      _model.set(_val);
    } else {
      _model.add();
    }
    return ServerResponse('Info', body: {
      "counter": _model.count,
    }).ok();
  }
}</code></pre>
<p>You will see the import to the lib folder of the root project. Since it shares the pubspec.yaml all the packages can be shared. You can import the CounterModel that we created earlier.</p>
<p>Create a file in at the location src/controllers/todos.dart and add the following:</p>
<pre><code>import 'package:shared_dart/src/models/todos.dart';
import 'package:shelf/src/request.dart';

import 'package:shelf/src/response.dart';

import '../result.dart';

class TodoController implements ResponseImpl {
  [@override](http://twitter.com/override)
  Future&lt;Response&gt; result(Request request) async {
    final _model = TodosModel();
    if (request.url.pathSegments.length &gt; 1) {
      final _id = int.tryParse(request.url.pathSegments[1] ?? '1');
      final _todo = await _model.getItem(_id);
      return ServerResponse('Todo Item', body: _todo).ok();
    }
    final _todos = await _model.getList();
    return ServerResponse(
      'List Todos',
      body: _todos.map((t) =&gt; t.toJson()).toList(),
    ).ok();
  }
}</code></pre>
<p>Just like before we are importing the TodosModel model from the lib folder.</p>
<p>For convenience add a file at the location src/controllers/index.dart and add the following:</p>
<pre><code>export 'counter.dart';
export 'todo.dart';</code></pre>
<p>This will make it easier to import all the controllers.</p>
<h3 id="run-the-project-server">Run the Project (Server)</h3>
<p>If you are using <a href="https://code.visualstudio.com/" rel="noopener noreferrer" target="_blank">VSCode</a> then you will need to update your launch.json with the following:</p>
<pre><code>{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: [https://go.microsoft.com/fwlink/?linkid=830387](https://go.microsoft.com/fwlink/?linkid=830387)
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Client",
            "request": "launch",
            "type": "dart",
            "program": "lib/main.dart"
        }, 
         {
            "name": "Server",
            "request": "launch",
            "type": "dart",
            "program": "bin/server.dart"
        }
    ]
}</code></pre>
<p>Now when you hit run with Server selected you will see the output:</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*akfcrkLuxit4vZdtHJty_Q.png" alt="" /></p>
<p>You can navigate to this in a browser but you can also work with this in <a href="https://www.getpostman.com/" rel="noopener noreferrer" target="_blank">Postman</a>.</p>
<p><img src="https://cdn-images-1.medium.com/max/4796/1*zJR2ZNZfCmvLg3y5wByLNA.png" alt="" /></p>
<p><img src="https://cdn-images-1.medium.com/max/4788/1*Z2vnHjHEfYe8yWajGWVLOw.png" alt="" /></p>
<p>Just by adding to the url todos and todos/1 it will return different responses.</p>
<p>For the counter model we can use query parameters too!</p>
<p><img src="https://cdn-images-1.medium.com/max/4768/1*YMwQEOoaCjngYpidKBbADg.png" alt="" /></p>
<p><img src="https://cdn-images-1.medium.com/max/4760/1*vPYs9780bcVrlIPBMjF4eQ.png" alt="" /></p>
<p>Just by adding ?count=22 it will update the model with the input.</p>
<blockquote>
  <p>Keep in mind this is running your Dart code from you lib folder in your Flutter project without needing the Flutter widgets!</p>
</blockquote>
<p>As a side benefit we can also run this project on Desktop. Check out the final project for the desktop folders needed from <a href="https://github.com/google/flutter-desktop-embedding" rel="noopener noreferrer" target="_blank">Flutter Desktop Embedding</a>.</p>
<p><img src="https://cdn-images-1.medium.com/max/3648/1*Mk_6Rlq2qMbpk79OPo_QBw.png" alt="" /></p>
<p><img src="https://cdn-images-1.medium.com/max/3648/1*hWirIWGRQjN8hVvUZsB2Nw.png" alt="" /></p>
<h3 id="conclusion">Conclusion</h3>
<p>Now if you wanted to deploy the container to Cloud Run you could with the following command:</p>
<p>gcloud builds submit — tag gcr.io/YOUR_GOOGLE_PROJECT_ID/PROJECT_NAME .</p>
<p>Replace PROJECT_NAME with your project name, mine is shared-dart for this example.</p>
<p>You will also need to replace YOUR_GOOGLE_PROJECT_ID with your Google Cloud Project ID. You can create one <a href="https://cloud.google.com/cloud-build/docs/quickstart-docker" rel="noopener noreferrer" target="_blank">here</a>.</p>
<p>Again the final project source code is <a href="https://github.com/AppleEducate/shared_dart" rel="noopener noreferrer" target="_blank">here</a>. Let me know your thoughts!</p>]]></content:encoded>
            <category>host-flutter-rest-api.md</category>
            <enclosure url="https://cdn-images-1.medium.com/max/2000/1*_pGj3DixmBImxcAl_HWWdA.gif" length="0" type="image/gif"/>
        </item>
        <item>
            <title><![CDATA[Building A Piano with Flutter]]></title>
            <link>https://rodydavis.com/#/blog/assets/blog/making-a-piano</link>
            <guid>assets/blog/making-a-piano</guid>
            <pubDate>Tue, 12 Mar 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[10 min read]]></description>
            <content:encoded><![CDATA[<h2 id="building-a-piano-with-flutter">Building A Piano with Flutter</h2>
<h3 id="tldr">TLDR</h3>
<p>You can find the final source code <a href="https://github.com/rodydavis/flutter_piano/tree/5k" rel="noopener noreferrer" target="_blank">here</a>.</p>
<p>This piano uses only <code>5032</code> bytes of Dart Code!</p>
<p>Winner of the <a href="https://flutter.dev/create" rel="noopener noreferrer" target="_blank">Flutter Create Contest</a> and you can see the certificate <a href="https://www.credential.net/exbvca0q?key=8be94f32ad2f56882045e013e960fa888afa4edd52edb963c48df351c7d1e443" rel="noopener noreferrer" target="_blank">here</a>!</p>
<h3 id="what-you-will-learn">What you will learn</h3>
<ul>
<li>Working with Dark Mode</li>
<li>Forcing app to be in landscape</li>
<li>Working with custom files bundled with the app</li>
<li>Working with midi and sounds in flutter</li>
<li>Working with <code>StatefulWidget</code></li>
<li>Using <code>SafeArea</code> and <code>Semantics</code></li>
<li>Building an app with minimal code</li>
</ul>
<h3 id="what-you-need">What you need</h3>
<ul>
<li><a href="https://flutter.dev/docs/get-started/install" rel="noopener noreferrer" target="_blank">Flutter SDK</a> Installed (<a href="https://flutter.dev/docs/get-started/codelab" rel="noopener noreferrer" target="_blank">More Info</a>)</li>
<li>A <code>.sf2</code> SoundFont File like <a href="https://github.com/rodydavis/flutter_piano/blob/5k/assets/sounds/Piano.sf2" rel="noopener noreferrer" target="_blank">this one</a></li>
<li>Physical iOS device (iOS Simulator does not work with this plugin for playing the sounds) or Android Emulator/Device</li>
</ul>
<h3 id="setting-up">Setting Up</h3>
<p>You can either create a new project with Android Studio or VSCode using the GUI or navigate to the location you want your project and using this command in the terminal: <code>lutter create -i swift -a kotlin flutter_piano</code>. Make sure to include Swift and Kotlin Support!</p>
<p>Now that you have your project created it should look like this.</p>
<p><img src="/images/flutter_piano/starter.png" alt="app-icon" /></p>
<p>Let's start by adding some dependencies to our `pubspec.yaml'</p>
<pre><code class="yaml language-yaml">dependencies:
  flutter:
    sdk: flutter
  tonic: ^0.2.3
  flutter_midi: ^0.1.1+3
  cupertino_icons: ^0.1.2</code></pre>
<p>and add the .sf2 file</p>
<pre><code class="yaml language-yaml"> assets:
   - assets/sounds/Piano.sf2</code></pre>
<p>If you haven't already create a new folder at the top of your project call <code>assets</code> and a subfolder called <code>sounds</code> and place the .sf2 file there and make sure it is named <code>Piano.sf2</code></p>
<p>Because our app will only work in landscape we need to update those settings as well.</p>
<p>navigate to the <code>/android/app/src/main/AndroidManifest.xml</code> and add this line inside <code>&lt;activity</code> in the <code>&lt;application</code>:</p>
<pre><code>android:screenOrientation="landscape"</code></pre>
<p>Example:</p>
<pre><code class="xml language-xml">&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.rodydavis.flutter_piano"&gt;

    &lt;!-- io.flutter.app.FlutterApplication is an android.app.Application that
         calls FlutterMain.startInitialization(this); in its onCreate method.
         In most cases you can leave this as-is, but you if you want to provide
         additional functionality it is fine to subclass or reimplement
         FlutterApplication and put your custom class here. --&gt;
    &lt;application
        android:name="io.flutter.app.FlutterApplication"
        android:label="flutter_piano"
        android:icon="@mipmap/ic_launcher"&gt;
        &lt;activity
            android:name=".MainActivity"
            android:launchMode="singleTop"
            android:theme="@style/LaunchTheme"
            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
            android:hardwareAccelerated="true"
            android:screenOrientation="landscape"
            android:windowSoftInputMode="adjustResize"&gt;
            &lt;!-- This keeps the window background of the activity showing
                 until Flutter renders its first frame. It can be removed if
                 there is no splash screen (such as the default splash screen
                 defined in @style/LaunchTheme). --&gt;
            &lt;meta-data
                android:name="io.flutter.app.android.SplashScreenUntilFirstFrame"
                android:value="true" /&gt;
            &lt;intent-filter&gt;
                &lt;action android:name="android.intent.action.MAIN"/&gt;
                &lt;category android:name="android.intent.category.LAUNCHER"/&gt;
            &lt;/intent-filter&gt;
        &lt;/activity&gt;
    &lt;/application&gt;
&lt;/manifest&gt;</code></pre>
<p>navigate to <code>/ios/Runner/info.plist</code> and change:</p>
<pre><code>&lt;key&gt;UISupportedInterfaceOrientations&lt;/key&gt;
&lt;array&gt;
    &lt;string&gt;UIInterfaceOrientationLandscapeLeft&lt;/string&gt;
    &lt;string&gt;UIInterfaceOrientationLandscapeRight&lt;/string&gt;
&lt;/array&gt;</code></pre>
<p>Now we can start with the UI! When you run the application now it should start in landscape!</p>
<p><img src="/images/flutter_piano/landscape.png" alt="landscape" /></p>
<h3 id="step-1">Step 1</h3>
<p>To make it eaiser to read lets remove the comments. Use "find and replace" and search for <code>\/\/.*</code></p>
<p><img src="/images/flutter_piano/comments.png" alt="comments" /></p>
<p>choose the "select all occurrances" button and hit <code>backspace</code> to delete.</p>
<p><img src="/images/flutter_piano/selectall.png" alt="select all" /></p>
<p>Hit save and you should see the code format for you.</p>
<p>The 'main.dart' file should look like this:</p>
<pre><code class="dart language-dart">import 'package:flutter/material.dart';

void main() =&gt; runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(title: 'Flutter Demo Home Page'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  MyHomePage({Key key, this.title}) : super(key: key);

  final String title;

  @override
  _MyHomePageState createState() =&gt; _MyHomePageState();
}

class _MyHomePageState extends State&lt;MyHomePage&gt; {
  int _counter = 0;

  void _incrementCounter() {
    setState(() {
      _counter++;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: &lt;Widget&gt;[
            Text(
              'You have pushed the button this many times:',
            ),
            Text(
              '$_counter',
              style: Theme.of(context).textTheme.display1,
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: Icon(Icons.add),
      ),
    );
  }
}</code></pre>
<h3 id="step-2">Step 2</h3>
<p>Delete the <code>MyHomePage</code> widget so you are left with this.</p>
<pre><code class="dart language-dart">import 'package:flutter/material.dart';

void main() =&gt; runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(title: 'Flutter Demo Home Page'),
    );
  }
}</code></pre>
<p>You should get an error and thats ok, we will fix that next.</p>
<p>Replace <code>MyHomePage(title: 'Flutter Demo Home Page')</code> with a <code>Scaffold()</code></p>
<pre><code class="dart language-dart">import 'package:flutter/material.dart';

void main() =&gt; runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: Scaffold(),
    );
  }
}</code></pre>
<h3 id="step-3">Step 3</h3>
<p>Change <code>MyApp</code> to a <code>StatefulWidget</code>. You can do this quickly by selecting <code>MyApp</code> and choose "Convert to StatefulWidget" with the helper.</p>
<p><img src="/images/flutter_piano/convert.png" alt="convert" /></p>
<p>It should look like this now:</p>
<pre><code class="dart language-dart">import 'package:flutter/material.dart';

void main() =&gt; runApp(MyApp());

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() =&gt; _MyAppState();
}

class _MyAppState extends State&lt;MyApp&gt; {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: Scaffold(),
    );
  }
}</code></pre>
<h2 id="step-4">Step 4</h2>
<p>Change the theme to dark. You can do this by setting the <code>ThemeData</code> in <code>MaterialApp</code></p>
<p>change:</p>
<pre><code class="dart language-dart">theme: ThemeData(
        primarySwatch: Colors.blue,
      ),</code></pre>
<p><br />
to this</p>
<pre><code class="dart language-dart">theme: ThemeData.dark(),</code></pre>
<p>Add and <code>AppBar</code> to the <code>Scaffold</code></p>
<p><code>appBar: AppBar(title: Text("Flutter Piano")),</code></p>
<pre><code class="dart language-dart">import 'package:flutter/material.dart';

void main() =&gt; runApp(MyApp());

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() =&gt; _MyAppState();
}

class _MyAppState extends State&lt;MyApp&gt; {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData.dark(),
      home: Scaffold(
        appBar: AppBar(title: Text("Flutter Piano")),
      ),
    );
  }
}</code></pre>
<p>Now build and run your app, it should look like this.</p>
<p><img src="/images/flutter_piano/darkmode.png" alt="dark-mode" /></p>
<h3 id="step-5">Step 5</h3>
<p>We need to add some imports to the top:</p>
<pre><code class="dart language-dart">import 'package:flutter/services.dart';
import 'package:flutter_midi/flutter_midi.dart';</code></pre>
<p>If you get an error make sure they are added in the <code>pubspec.yaml</code> from earlier, then restart the app. Be sure to run <code>flutter packages get</code> everytime you add a dependency.</p>
<p>Now we can add out <code>initState()</code> to our app.</p>
<pre><code class="dart language-dart"> @override
 initState() {
   FlutterMidi.unmute();
   rootBundle.load("assets/sounds/Piano.sf2").then((sf2) {
     FlutterMidi.prepare(sf2: sf2, name: "Piano.sf2");
   });
   super.initState();
 }</code></pre>
<p>Run the app and make sure you do not get any errors. If you are running this on the iOS Simulator you will get the following error:</p>
<p><code>Could Not Load Midi on this Device. (Cannot run on simulator), have you included the sound font?</code></p>
<p>It is ok for developing the UI but once we start with the midi you will need to plug in a real device.</p>
<p>Your code so far should look like this:</p>
<pre><code class="dart language-dart">import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_midi/flutter_midi.dart';

void main() =&gt; runApp(MyApp());

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() =&gt; _MyAppState();
}

class _MyAppState extends State&lt;MyApp&gt; {
  @override
  initState() {
    FlutterMidi.unmute();
    rootBundle.load("assets/sounds/Piano.sf2").then((sf2) {
      FlutterMidi.prepare(sf2: sf2, name: "Piano.sf2");
    });
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData.dark(),
      home: Scaffold(
        appBar: AppBar(title: Text("Flutter Piano")),
      ),
    );
  }
}</code></pre>
<h3 id="step-6">Step 6</h3>
<p>To make Flutter development faster we start with containers and colors so we can make sure everything is the right size.</p>
<p>Lets start by adding a <code>Drawer</code> with a <code>ListView</code> to our <code>Scaffold</code>.</p>
<pre><code class="dart language-dart"> home: Scaffold(
        appBar: AppBar(title: Text("Flutter Piano")),
        drawer: Drawer(child: SafeArea(child: ListView(children: &lt;Widget&gt;[]))),
      ),</code></pre>
<p>You should now get a menu icon that when you press looks like this.</p>
<p><img src="/images/flutter_piano/menu.png" alt="menu" /></p>
<p>Now lets add a ListView that scrolls Horizontially to the body of the <code>Scaffold</code></p>
<pre><code class="dart language-dart"> body: ListView.builder(
            itemCount: 7,
            scrollDirection: Axis.horizontal,
            itemBuilder: (BuildContext context, int index) {
              return Container();
            },
          )</code></pre>
<p>We need 7 <code>itemCount</code> for 7 octaves on the Piano.</p>
<pre><code class="dart language-dart">import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_midi/flutter_midi.dart';

void main() =&gt; runApp(MyApp());

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() =&gt; _MyAppState();
}

class _MyAppState extends State&lt;MyApp&gt; {
  @override
  initState() {
    FlutterMidi.unmute();
    rootBundle.load("assets/sounds/Piano.sf2").then((sf2) {
      FlutterMidi.prepare(sf2: sf2, name: "Piano.sf2");
    });
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData.dark(),
      home: Scaffold(
          appBar: AppBar(title: Text("Flutter Piano")),
          drawer:
              Drawer(child: SafeArea(child: ListView(children: &lt;Widget&gt;[]))),
          body: ListView.builder(
            itemCount: 7,
            scrollDirection: Axis.horizontal,
            itemBuilder: (BuildContext context, int index) {
              return Container();
            },
          )),
    );
  }
}</code></pre>
<h3 id="step-7">Step 7</h3>
<p>Now we need to build the octave section that will be repeated. Since every octave is identical we can repeat the octaves with minor adjustments.</p>
<p>Lets add some parameters for use to define for our UI. Add these underneath the initState function.</p>
<pre><code class="dart language-dart">double get keyWidth =&gt; 80 + (80 * _widthRatio);
double _widthRatio = 0.0;
bool _showLabels = true;</code></pre>
<p>We will use these to dynamily update the keys.</p>
<p>Under the <code>itemBuilder</code> lets define which octave we are working with by adding:<br />
<code>final int i = index * 12;</code></p>
<p>Our code should look like this now:</p>
<pre><code class="dart language-dart">import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_midi/flutter_midi.dart';

void main() =&gt; runApp(MyApp());

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() =&gt; _MyAppState();
}

class _MyAppState extends State&lt;MyApp&gt; {
  @override
  initState() {
    FlutterMidi.unmute();
    rootBundle.load("assets/sounds/Piano.sf2").then((sf2) {
      FlutterMidi.prepare(sf2: sf2, name: "Piano.sf2");
    });
    super.initState();
  }

  double get keyWidth =&gt; 80 + (80 * _widthRatio);
  double _widthRatio = 0.0;
  bool _showLabels = true;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData.dark(),
      home: Scaffold(
          appBar: AppBar(title: Text("Flutter Piano")),
          drawer:
              Drawer(child: SafeArea(child: ListView(children: &lt;Widget&gt;[]))),
          body: ListView.builder(
            itemCount: 7,
            scrollDirection: Axis.horizontal,
            itemBuilder: (BuildContext context, int index) {
              final int i = index * 12;
              return Container();
            },
          )),
    );
  }
}</code></pre>
<h3 id="step-8">Step 8</h3>
<p>Now we need to add a <code>Stack</code> for our octave:</p>
<pre><code class="dart language-dart"> return SafeArea(
               child: Stack(children: &lt;Widget&gt;[
                 Row(mainAxisSize: MainAxisSize.min, children: &lt;Widget&gt;[
                   _buildKey(24 + i, false),
                   _buildKey(26 + i, false),
                   _buildKey(28 + i, false),
                   _buildKey(29 + i, false),
                   _buildKey(31 + i, false),
                   _buildKey(33 + i, false),
                   _buildKey(35 + i, false),
                 ]),
                 Positioned(
                     left: 0.0,
                     right: 0.0,
                     bottom: 100,
                     top: 0.0,
                     child: Row(
                         mainAxisAlignment: MainAxisAlignment.spaceBetween,
                         mainAxisSize: MainAxisSize.min,
                         children: &lt;Widget&gt;[
                           Container(width: keyWidth * .5),
                           _buildKey(25 + i, true),
                           _buildKey(27 + i, true),
                           Container(width: keyWidth),
                           _buildKey(30 + i, true),
                           _buildKey(32 + i, true),
                           _buildKey(34 + i, true),
                           Container(width: keyWidth * .5),
                         ])),
               ]),
             );</code></pre>
<p>Here we have defined which midi notes are played for each octave.</p>
<p>Now add the function <code>_buildKey</code> underneath our <code>build</code> function.</p>
<pre><code class="dart language-dart"> Widget _buildKey(int midi, bool accidental) {
     if (accidental) {
      return Container(
          width: keyWidth,
          color: Colors.black,
          margin: EdgeInsets.symmetric(horizontal: 2.0),
          padding: EdgeInsets.symmetric(horizontal: keyWidth * .1),
          child: Material(
            elevation: 6.0,
            borderRadius: borderRadius,
            shadowColor: Color(0x802196F3),
          ));
    }
    return Container(
        width: keyWidth,
        color: Colors.white,
        margin: EdgeInsets.symmetric(horizontal: 2.0));
  }</code></pre>
<p>Also add <code>borderRadius</code> to the bottom of <code>main.dart</code></p>
<pre><code class="dart language-dart">const BorderRadiusGeometry borderRadius = BorderRadius.only(
    bottomLeft: Radius.circular(10.0), bottomRight: Radius.circular(10.0));</code></pre>
<p>Your app should look like this:</p>
<p><img src="/images/flutter_piano/keys.png" alt="keys" /></p>
<p>Your code should look like this:</p>
<pre><code class="dart language-dart">import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_midi/flutter_midi.dart';

void main() =&gt; runApp(MyApp());

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() =&gt; _MyAppState();
}

class _MyAppState extends State&lt;MyApp&gt; {
  @override
  initState() {
    FlutterMidi.unmute();
    rootBundle.load("assets/sounds/Piano.sf2").then((sf2) {
      FlutterMidi.prepare(sf2: sf2, name: "Piano.sf2");
    });
    super.initState();
  }

  double get keyWidth =&gt; 80 + (80 * _widthRatio);
  double _widthRatio = 0.0;
  bool _showLabels = true;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData.dark(),
      home: Scaffold(
          appBar: AppBar(title: Text("Flutter Piano")),
          drawer:
              Drawer(child: SafeArea(child: ListView(children: &lt;Widget&gt;[]))),
          body: ListView.builder(
            itemCount: 7,
            scrollDirection: Axis.horizontal,
            itemBuilder: (BuildContext context, int index) {
              final int i = index * 12;
              return SafeArea(
                child: Stack(children: &lt;Widget&gt;[
                  Row(mainAxisSize: MainAxisSize.min, children: &lt;Widget&gt;[
                    _buildKey(24 + i, false),
                    _buildKey(26 + i, false),
                    _buildKey(28 + i, false),
                    _buildKey(29 + i, false),
                    _buildKey(31 + i, false),
                    _buildKey(33 + i, false),
                    _buildKey(35 + i, false),
                  ]),
                  Positioned(
                      left: 0.0,
                      right: 0.0,
                      bottom: 100,
                      top: 0.0,
                      child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          mainAxisSize: MainAxisSize.min,
                          children: &lt;Widget&gt;[
                            Container(width: keyWidth * .5),
                            _buildKey(25 + i, true),
                            _buildKey(27 + i, true),
                            Container(width: keyWidth),
                            _buildKey(30 + i, true),
                            _buildKey(32 + i, true),
                            _buildKey(34 + i, true),
                            Container(width: keyWidth * .5),
                          ])),
                ]),
              );
            },
          )),
    );
  }

  Widget _buildKey(int midi, bool accidental) {
    if (accidental) {
      return Container(
          width: keyWidth,
          color: Colors.black,
          margin: EdgeInsets.symmetric(horizontal: 2.0),
          padding: EdgeInsets.symmetric(horizontal: keyWidth * .1),
          child: Material(
            elevation: 6.0,
            borderRadius: borderRadius,
            shadowColor: Color(0x802196F3),
          ));
    }
    return Container(
        width: keyWidth,
        color: Colors.white,
        margin: EdgeInsets.symmetric(horizontal: 2.0));
  }
}

const BorderRadiusGeometry borderRadius = BorderRadius.only(
    bottomLeft: Radius.circular(10.0), bottomRight: Radius.circular(10.0));</code></pre>
<h3 id="step-9">Step 9</h3>
<p>Time to add midi by adding the following import to the top of the file:</p>
<pre><code class="dart language-dart">import 'package:tonic/tonic.dart';</code></pre>
<p>In the <code>-buildKey</code> function you can add this line:</p>
<pre><code class="dart language-dart"> final pitchName = Pitch.fromMidiNumber(midi).toString();</code></pre>
<p>We can also create the piano key itself underneath it:</p>
<pre><code class="dart language-dart"> final pianoKey = Stack(
     children: &lt;Widget&gt;[
       Semantics(
           button: true,
           hint: pitchName,
           child: Material(
               borderRadius: borderRadius,
               color: accidental ? Colors.black : Colors.white,
               child: InkWell(
                 borderRadius: borderRadius,
                 highlightColor: Colors.grey,
                 onTap: () {},
                 onTapDown: (_) =&gt; FlutterMidi.playMidiNote(midi: midi),
               ))),
       Positioned(
           left: 0.0,
           right: 0.0,
           bottom: 20.0,
           child: _showLabels
               ? Text(pitchName,
                   textAlign: TextAlign.center,
                   style: TextStyle(
                       color: !accidental ? Colors.black : Colors.white))
               : Container()),
     ],
   );</code></pre>
<p>Remove the color from the container and replace it with <code>child: pianoKey,</code></p>
<pre><code class="dart language-dart"> if (accidental) {
     return Container(
         width: keyWidth,
         margin: EdgeInsets.symmetric(horizontal: 2.0),
         padding: EdgeInsets.symmetric(horizontal: keyWidth * .1),
         child: Material(
             elevation: 6.0,
             borderRadius: borderRadius,
             shadowColor: Color(0x802196F3),
             child: pianoKey));
   }
   return Container(
       width: keyWidth,
       child: pianoKey,
       margin: EdgeInsets.symmetric(horizontal: 2.0));</code></pre>
<p>The complete function should look like this:</p>
<pre><code class="dart language-dart"> Widget _buildKey(int midi, bool accidental) {
   final pitchName = Pitch.fromMidiNumber(midi).toString();
   final pianoKey = Stack(
     children: &lt;Widget&gt;[
       Semantics(
           button: true,
           hint: pitchName,
           child: Material(
               borderRadius: borderRadius,
               color: accidental ? Colors.black : Colors.white,
               child: InkWell(
                 borderRadius: borderRadius,
                 highlightColor: Colors.grey,
                 onTap: () {},
                 onTapDown: (_) =&gt; FlutterMidi.playMidiNote(midi: midi),
               ))),
       Positioned(
           left: 0.0,
           right: 0.0,
           bottom: 20.0,
           child: _showLabels
               ? Text(pitchName,
                   textAlign: TextAlign.center,
                   style: TextStyle(
                       color: !accidental ? Colors.black : Colors.white))
               : Container()),
     ],
   );
   if (accidental) {
     return Container(
         width: keyWidth,
         margin: EdgeInsets.symmetric(horizontal: 2.0),
         padding: EdgeInsets.symmetric(horizontal: keyWidth * .1),
         child: Material(
             elevation: 6.0,
             borderRadius: borderRadius,
             shadowColor: Color(0x802196F3),
             child: pianoKey));
   }
   return Container(
       width: keyWidth,
       child: pianoKey,
       margin: EdgeInsets.symmetric(horizontal: 2.0));
 }</code></pre>
<p>Now when you run the app it should look like this:</p>
<p><img src="/images/flutter_piano/labels.png" alt="labels" /></p>
<p>Almost there! Now let's give our user some control.</p>
<h3 id="step-10">Step 10</h3>
<p>Add these settings to the <code>Drawer</code></p>
<pre><code class="dart language-dart">Container(height: 20.0),
ListTile(title: Text("Change Width")),
Slider(
    activeColor: Colors.redAccent,
    inactiveColor: Colors.white,
    min: 0.0,
    max: 1.0,
    value: _widthRatio,
    onChanged: (double value) =&gt;
        setState(() =&gt; _widthRatio = value)),
Divider(),
ListTile(
    title: Text("Show Labels"),
    trailing: Switch(
    value: _showLabels,
    onChanged: (bool value) =&gt;
        setState(() =&gt; _showLabels = value))),
Divider(),</code></pre>
<p>Now you should see this:</p>
<p><img src="/images/flutter_piano/settings.png" alt="settings" /></p>
<h3 id="step-11">Step 11</h3>
<p>To start with <code>Middle C</code> lets add an inital scroll offset to the <code>ListView</code></p>
<p><code>controller: ScrollController(initialScrollOffset: 1500.0),</code></p>
<p>Now when we start the app it should co to C4.</p>
<p>The final App should look like this:</p>
<p><img src="/images/flutter_piano/final.png" alt="final" /></p>
<p>The final code should look like this:</p>
<pre><code class="dart language-dart">import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_midi/flutter_midi.dart';
import 'package:tonic/tonic.dart';

void main() =&gt; runApp(MyApp());

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() =&gt; _MyAppState();
}

class _MyAppState extends State&lt;MyApp&gt; {
  @override
  initState() {
    FlutterMidi.unmute();
    rootBundle.load("assets/sounds/Piano.sf2").then((sf2) {
      FlutterMidi.prepare(sf2: sf2, name: "Piano.sf2");
    });
    super.initState();
  }

  double get keyWidth =&gt; 80 + (80 * _widthRatio);
  double _widthRatio = 0.0;
  bool _showLabels = true;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData.dark(),
      home: Scaffold(
          appBar: AppBar(title: Text("Flutter Piano")),
          drawer: Drawer(
              child: SafeArea(
                  child: ListView(children: &lt;Widget&gt;[
            Container(height: 20.0),
            ListTile(title: Text("Change Width")),
            Slider(
                activeColor: Colors.redAccent,
                inactiveColor: Colors.white,
                min: 0.0,
                max: 1.0,
                value: _widthRatio,
                onChanged: (double value) =&gt;
                    setState(() =&gt; _widthRatio = value)),
            Divider(),
            ListTile(
                title: Text("Show Labels"),
                trailing: Switch(
                    value: _showLabels,
                    onChanged: (bool value) =&gt;
                        setState(() =&gt; _showLabels = value))),
            Divider(),
          ]))),
          body: ListView.builder(
            itemCount: 7,
            scrollDirection: Axis.horizontal,
            controller: ScrollController(initialScrollOffset: 1500.0),
            itemBuilder: (BuildContext context, int index) {
              final int i = index * 12;
              return SafeArea(
                child: Stack(children: &lt;Widget&gt;[
                  Row(mainAxisSize: MainAxisSize.min, children: &lt;Widget&gt;[
                    _buildKey(24 + i, false),
                    _buildKey(26 + i, false),
                    _buildKey(28 + i, false),
                    _buildKey(29 + i, false),
                    _buildKey(31 + i, false),
                    _buildKey(33 + i, false),
                    _buildKey(35 + i, false),
                  ]),
                  Positioned(
                      left: 0.0,
                      right: 0.0,
                      bottom: 100,
                      top: 0.0,
                      child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          mainAxisSize: MainAxisSize.min,
                          children: &lt;Widget&gt;[
                            Container(width: keyWidth * .5),
                            _buildKey(25 + i, true),
                            _buildKey(27 + i, true),
                            Container(width: keyWidth),
                            _buildKey(30 + i, true),
                            _buildKey(32 + i, true),
                            _buildKey(34 + i, true),
                            Container(width: keyWidth * .5),
                          ])),
                ]),
              );
            },
          )),
    );
  }

  Widget _buildKey(int midi, bool accidental) {
    final pitchName = Pitch.fromMidiNumber(midi).toString();
    final pianoKey = Stack(
      children: &lt;Widget&gt;[
        Semantics(
            button: true,
            hint: pitchName,
            child: Material(
                borderRadius: borderRadius,
                color: accidental ? Colors.black : Colors.white,
                child: InkWell(
                  borderRadius: borderRadius,
                  highlightColor: Colors.grey,
                  onTap: () {},
                  onTapDown: (_) =&gt; FlutterMidi.playMidiNote(midi: midi),
                ))),
        Positioned(
            left: 0.0,
            right: 0.0,
            bottom: 20.0,
            child: _showLabels
                ? Text(pitchName,
                    textAlign: TextAlign.center,
                    style: TextStyle(
                        color: !accidental ? Colors.black : Colors.white))
                : Container()),
      ],
    );
    if (accidental) {
      return Container(
          width: keyWidth,
          margin: EdgeInsets.symmetric(horizontal: 2.0),
          padding: EdgeInsets.symmetric(horizontal: keyWidth * .1),
          child: Material(
              elevation: 6.0,
              borderRadius: borderRadius,
              shadowColor: Color(0x802196F3),
              child: pianoKey));
    }
    return Container(
        width: keyWidth,
        child: pianoKey,
        margin: EdgeInsets.symmetric(horizontal: 2.0));
  }
}

const BorderRadiusGeometry borderRadius = BorderRadius.only(
    bottomLeft: Radius.circular(10.0), bottomRight: Radius.circular(10.0));</code></pre>
<h2 id="conclusion">Conclusion</h2>
<p>If you delete <code>tests/</code> and run <code>find . -name "*.dart" | xargs cat | wc -c</code> you will see that the dart code only uses <code>5032</code> bytes of space! </p>
<p>Now we have a fully functional piano that you can play with and enjoy on iOS and Android.</p>
<p>I was really inspired when creating this for the <a href="https://flutter.dev/create" rel="noopener noreferrer" target="_blank">Flutter Create</a> contest.</p>
<p>Hope you learned something, if you have any questions you can always read out to me. This is an open source piano and would love PRs on the main project <a href="https://github.com/rodydavis/flutter_piano" rel="noopener noreferrer" target="_blank">here</a>!</p>]]></content:encoded>
            <category>making-a-piano.md</category>
            <enclosure url="https://rodydavis.com/images/flutter_piano/starter.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[How to build a native cross platform project with Flutter]]></title>
            <link>https://rodydavis.com/#/blog/assets/blog/native-cross-platform-flutter</link>
            <guid>assets/blog/native-cross-platform-flutter</guid>
            <pubDate>Fri, 06 Sep 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[4 min read]]></description>
            <content:encoded><![CDATA[<h2 id="how-to-build-a-native-cross-platform-project-with-flutter">How to build a native cross platform project with Flutter</h2>
<p>Import dart:html and dart:io in the same project!</p>
<p>You can find the final project <a href="https://github.com/AppleEducate/flutter_x/tree/finish" rel="noopener noreferrer" target="_blank">here</a>.</p>
<p>Up to now you have been able to create projects with Flutter that run on iOS/Android, Web and Desktop but only sharing pure dart plugins. Flutter launched Flutter for web at Google I/O and was a temporary fork that required you to change imports from import 'package:flutter/material.dart'; to import 'package:flutter_web/material.dart';. As you can image this was really difficult for a code base as you had to create a fork and change the imports. This also meant that you could not import any package that needed on a path or depended on flutter. The time as come and the merge is complete. Now you no longer need to change the imports!</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*epSHkw0msNuaisyHy9yYAA.gif" alt="" /></p>
<p>You can use any plugin now, have a debugger, create new flutter projects with the web folder added, web plugins, and so much more..</p>
<h3 id="disclaimer">Disclaimer</h3>
<p>You will need to be on the latest flutter for this to work.</p>
<p><a href="https://flutter.io/get-started/install/" rel="noopener noreferrer" target="_blank">Download Flutter</a></p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*1PVcOkDgx2p_G3Bou3IFsg.jpeg" alt="" /></p>
<p>If you are pretty new to Flutter you can check out <a href="https://flutter.io/get-started/codelab/" rel="noopener noreferrer" target="_blank">this useful guide</a> on how to create a new project step by step.</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*d6qN8hoGMwldMtIsQYIqrg.jpeg" alt="" /></p>
<p>Create a new project named flutter_x and it should look like this:</p>
<p><img src="https://cdn-images-1.medium.com/max/2628/1*xe6ubLj5psVH4JQd-VqSAQ.png" alt="" /></p>
<p>You can also down the starter project <a href="https://github.com/AppleEducate/flutter_x/tree/starter" rel="noopener noreferrer" target="_blank">here</a>.</p>
<p>Your code should look like this:</p>
<iframe src="https://medium.com/media/64311732193c2dd39b2cdbc42965b538" frameborder=0></iframe>
<p>Just to make sure everything is working go ahead and run the project on iOS/Android.</p>
<p><img src="https://cdn-images-1.medium.com/max/5464/1*teDs_OqHkRdhwyuzyb2rVA.png" alt="" /></p>
<p>You should have the counter application running and working correctly. Now quit and run on Chrome. It should be listed as a device. You can also run from the command line flutter run -d chrome.</p>
<p><img src="https://cdn-images-1.medium.com/max/5248/1*CzZ28crDYxBEMaNVq9CtvQ.png" alt="" /></p>
<blockquote>
  <p><em>You do not get hot reload yet on web so be aware of that.</em><br />
  <em>This is optional but I use this structure in all my apps</em></p>
</blockquote>
<iframe src="https://medium.com/media/139a52e7b9117765d41bf34d5813f57c" frameborder=0></iframe>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*zr22DdSlEXlluwcki-ahEQ.png" alt="" /></p>
<p>Your project should now look like this.</p>
<p>Open your pubspec.yaml and import the following packages.</p>
<pre><code>universal_html:
url_launcher:</code></pre>
<blockquote>
  <p><em>You can also remove the comments generated in the pubspec.yaml</em></p>
</blockquote>
<p>Your pubspec.yaml will now read like this:</p>
<pre><code>name: flutter_x
description: A new Flutter project.

version: 1.0.0+1

environment:
  sdk: "&gt;=2.1.0 &lt;3.0.0"

dependencies:
  flutter:
    sdk: flutter

cupertino_icons: ^0.1.2
  universal_html: ^1.1.0
  url_launcher: ^5.1.2

dev_dependencies:
  flutter_test:
    sdk: flutter

flutter:

uses-material-design: trueBy default if you were to check if the device was mobile or web you will get an error at compile time when trying to import a plugin that is not meant for the platform. To get around this we will use dynamic imports.</code></pre>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*YCLt5ItFmyOmrd-CKgOQFQ.png" alt="" /></p>
<p>Create a url_launcher folder and file url_launcher.dart, mobile.dart, web.dart, unsupported.dart inside the plugins folder.</p>
<p>In the file url_launcher.dart add the following:</p>
<pre><code>export 'unsupported.dart'
    if (dart.library.html) 'web.dart'
    if (dart.library.io) 'mobile.dart';</code></pre>
<p>This will pick the correct file at runtime and give a fallback if it is not supported.</p>
<p>To protect against edge cases you will need to set up a fallback for the import. In unsupported.dart add the following:</p>
<pre><code>class UrlUtils {
  UrlUtils._();

static void open(String url, {String name}) {
    throw 'Platform Not Supported';
  }
}</code></pre>
<p>The class UrlUtils and the public methods have to match all three files for this to work correctly. Always set up the unsupported first then copy the file into mobile.dart and web.dart to ensure no typos.</p>
<p>You should now have 3 files with the above code in each class.</p>
<p>In mobile.dart add the following:</p>
<pre><code>import 'package:url_launcher/url_launcher.dart';

class UrlUtils {
  UrlUtils._();

static void open(String url, {String name}) async {
    if (await canLaunch(url)) {
      await launch(url);
    }
  }
}</code></pre>
<p>This will open the link in safari view controller or android’s default browser respectively.</p>
<p>In web.dart add the following:</p>
<pre><code>import 'package:universal_html/prefer_universal/html.dart' as html;

class UrlUtils {
  UrlUtils._();

static void open(String url, {String name}) {
    html.window.open(url, name);
  }
}</code></pre>
<p>This will open up a new window in the browser with the specified link.</p>
<p>Add a button to the center of the screen. The ui/home/screen.dart should read the following:</p>
<pre><code>import 'package:flutter/material.dart';

class MyHomePage extends StatefulWidget {
  MyHomePage({Key key, this.title}) : super(key: key);

final String title;

[@override](http://twitter.com/override)
  _MyHomePageState createState() =&gt; _MyHomePageState();
}

class _MyHomePageState extends State&lt;MyHomePage&gt; {
  [@override](http://twitter.com/override)
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
      ),
      body: Center(
          child: RaisedButton(
        child: Text('Open Flutter.dev'),
        onPressed: () {},
      )),
    );
  }
}</code></pre>
<p>Update the onPressed to the following:</p>
<pre><code>onPressed: () {
    try {
        UrlUtils.open('[https://flutter.dev'](https://flutter.dev'));
    } catch (e) {
        print('Error -&gt; $e');
    }
},</code></pre>
<p>Now when you go to import the UrlUtils it is important to import the correct URI.</p>
<p><img src="https://cdn-images-1.medium.com/max/2140/1*7OyxZG6557DYE1XiBscCtA.png" alt="" /></p>
<p>Make sure to import import 'package:flutter_x/plugins/url_launcher/url_launcher.dart'; only.</p>
<blockquote>
  <p><em>You can use the relative import if you wish.</em></p>
</blockquote>
<p>You UI code will now read the following:</p>
<pre><code>import 'package:flutter/material.dart';

import '../../plugins/url_launcher/url_launcher.dart';

class MyHomePage extends StatefulWidget {
  MyHomePage({Key key, this.title}) : super(key: key);

final String title;

[@override](http://twitter.com/override)
  _MyHomePageState createState() =&gt; _MyHomePageState();
}

class _MyHomePageState extends State&lt;MyHomePage&gt; {
  [@override](http://twitter.com/override)
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
      ),
      body: Center(
          child: RaisedButton(
        child: Text('Open Flutter.dev'),
        onPressed: () {
          try {
            UrlUtils.open('[https://flutter.dev'](https://flutter.dev'));
          } catch (e) {
            print('Error -&gt; $e');
          }
        },
      )),
    );
  }
}</code></pre>
<p>Your app on the web should look like this:</p>
<p><img src="https://cdn-images-1.medium.com/max/5248/1*6ni24NpLIULqi_Cd5NHh3Q.png" alt="" /></p>
<p>And when you tap the button..</p>
<p><img src="https://cdn-images-1.medium.com/max/5248/1*tgcfnrgu9O4joiPeKFmqKw.png" alt="" /></p>
<p>And when you run it on iOS/Android it should look like this:</p>
<p><img src="https://cdn-images-1.medium.com/max/5036/1*QEFw3xDevKMsjke4Dd06VA.png" alt="" /></p>
<p>And when you tap the button..</p>
<p><img src="https://cdn-images-1.medium.com/max/5036/1*lCvTvAvu0nI_dhgUUFHkWA.png" alt="" /></p>
<p>Congratulations! You made it :)</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*KowWujusMfDjlkjeeOFEBg.gif" alt="" /></p>
<p>Here is the final project located <a href="https://github.com/AppleEducate/flutter_x/tree/finish" rel="noopener noreferrer" target="_blank">here</a>.</p>
<p>Please reach out if you have any questions!</p>
<p><em>Originally published at <a href="https://gist.github.com/a2c38b2020d09e718c8d894d048e9c7e" rel="noopener noreferrer" target="_blank">http://github.com</a>.</em></p>]]></content:encoded>
            <category>native-cross-platform-flutter.md</category>
            <enclosure url="https://cdn-images-1.medium.com/max/2000/1*epSHkw0msNuaisyHy9yYAA.gif" length="0" type="image/gif"/>
        </item>
        <item>
            <title><![CDATA[How To Send Push Notifications on Flutter Web (FCM)]]></title>
            <link>https://rodydavis.com/#/blog/assets/blog/push-notifications-flutter-web</link>
            <guid>assets/blog/push-notifications-flutter-web</guid>
            <pubDate>Fri, 01 May 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[min read]]></description>
            <content:encoded><![CDATA[<h2 id="how-to-send-push-notifications-on-flutter-web-fcm">How To Send Push Notifications on Flutter Web (FCM)</h2>
<p>If you are using Firebase then you are probably familiar with Firebase Cloud Messaging. The setup on Flutter web is very different than mobile and other plugins you are probably used to.</p>
<p><img src="https://cdn-images-1.medium.com/max/3200/1*B0Av_NnFrCKsyC7gN94ytg.png" alt="" /></p>
<h3 id="setting-up">Setting Up</h3>
<p>Open your web/index.html and look for the following script. If you do not have one you can add it now in the <body> tag.</p>
<pre><code>&lt;script&gt;
if ("serviceWorker" in navigator) {
  window.addEventListener("load", function () {
    navigator.serviceWorker.register("/flutter_service_worker.js");
  });
}
&lt;/script&gt;</code></pre>
<p>We need to modify it to support the FCM service worker. The important thing we need to do is comment out the flutter_service_worker.js so that we will not get 404 errors when registering the FCM service worker.</p>
<pre><code>&lt;script&gt;
if ("serviceWorker" in navigator) {
  window.addEventListener("load", function () {
    // navigator.serviceWorker.register("/flutter_service_worker.js");
    navigator.serviceWorker.register("/firebase-messaging-sw.js");
  });
}
&lt;/script&gt;</code></pre>
<p>Now create a new file called firebase-messaging-sw.js in the web folder with the following contents:</p>
<iframe src="https://medium.com/media/455c7a3a979544d73c10a03369d054b4" frameborder=0></iframe>
<p>Make sure to replace the config keys with your firebase keys.</p>
<h3 id="helper-methods">Helper Methods</h3>
<p>Create a new dart file wherever you like named firebase_messaging.dart with the following:</p>
<iframe src="https://medium.com/media/cc60e06d906b5b5d7be89e9479fa37e7" frameborder=0></iframe>
<p>Create a button in the app that will be used to request permissions. While it is possible to request for permission when the app launches this is usually bad practice as the user is unlikely to accept and there is no trust built yet. You can request permissions with the following:</p>
<pre><code>final _messaging = FBMessaging.instance;

_messaging.requestPermission().then((_) async {

final _token = await _messaging.getToken();

print('Token: $_token');

});</code></pre>
<p>You can listen to messages with the following:</p>
<pre><code>final _messaging = FBMessaging.instance;

_messaging.stream.listen((event) {

print('New Message: ${event}');

});</code></pre>
<h3 id="testing">Testing</h3>
<p>Now when you run your application and request permissions you will get a token back. With this token you can open the firebase console and sent a test message to the token.</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*ZzoPP7kRHOR-yDN6Sv9XjQ.png" alt="" /></p>
<h3 id="conclusion">Conclusion</h3>
<p>Now you can send push notifications to Flutter apps! You still need to use conditional imports to support the mobile side as well but stay tuned for an example with that. Let me know your questions and any feedback you may have.</p>]]></content:encoded>
            <category>push-notifications-flutter-web.md</category>
            <enclosure url="https://cdn-images-1.medium.com/max/3200/1*B0Av_NnFrCKsyC7gN94ytg.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[The Perfect Brisket]]></title>
            <link>https://rodydavis.com/#/blog/assets/blog/the-perfect-brisket</link>
            <guid>assets/blog/the-perfect-brisket</guid>
            <pubDate>Thu, 24 Dec 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[3 min read]]></description>
            <content:encoded><![CDATA[<h2 id="the-perfect-brisket">The Perfect Brisket</h2>
<p>This is a living document meant to be updated each time I improve on the perfect smoked brisket recipe. I don't get to cook it often but when I do I go all out.</p>
<p><img src="/images/cooking/brisket-start.jpeg" alt="" /></p>
<p>Be prepared to take 4-6hrs to smoke the meat.</p>
<h3 id="ingredients">Ingredients</h3>
<ul>
<li>13-16lb Whole Beef Brisket</li>
<li>Classic Yellow Mustard</li>
<li>Dry Rub (Mr. P's Rub-a-butt)</li>
<li>Large Cutting Board</li>
<li>Very Sharp Knife</li>
<li>Smoker (Akorn)</li>
<li>Apple Wood Chips</li>
<li>Charcoal Briquettes</li>
<li>Meat Thermometer</li>
<li>Aluminum Foil</li>
</ul>
<p><img src="/images/cooking/brisket-prep.jpeg" alt="" /></p>
<p>First you need to source the brisket. I usually like to go to a local butcher shop and look for some good deals. This last time I went it was at $6.99/lb but I have gotten it as low as $3.99/lb. To cook for a big family and have leftovers you get get a 13-16lb brisket (This is usually what they already have in stock).</p>
<h3 id="prepare-the-meat">Prepare The Meat</h3>
<p>After you have the meat out of the packaging you can place it on a cutting board and start to pat dry the meat. This will take quite a few paper towels to dry all the blood and moisture.</p>
<p><img src="/images/cooking/brisket-raw.jpeg" alt="" /></p>
<p>After the meat is dry you can grab a very sharp curved knife to be used to trim the fat. The goal of the trimming is to remove most of the hard fat in the thick areas.</p>
<p><img src="/images/cooking/brisket-trim.jpeg" alt="" /></p>
<p>You shouldn't have to trim that much unless you are preparing for a competition but in this case I am preparing for a group of people and need more meat. As you are trimming the fat you want to make sure to only cut the thick hard parts and not into the meat (it's ok if this is not perfect, you can use the trimmings for other stuff).</p>
<p><img src="/images/cooking/brisket-trimmed.jpeg" alt="" /></p>
<h3 id="season-the-meat">Season The Meat</h3>
<p>With the meat trimmed it is now time to put the dry rub on the brisket. You will need to grab the mustard and whichever seasoning you chose. Be prepared to get very messy at this step, and id you have a helping hand that would be even better (Gloves also work). </p>
<p>Start of with lines of mustard on the meat so that you have a nice even coat to rub in. Don't worry if you do not like mustard like myself, it will cook out and is only used to keep the seasoning on the meat.</p>
<p><img src="/images/cooking/brisket-mustard.jpeg" alt="" /></p>
<p>Now add the seasoning and rub it in with your hands or barbecue brush and repeat on the opposite side. You want to get a nice thick coat.</p>
<p><img src="/images/cooking/brisket-rub.jpeg" alt="" /></p>
<p>After you finish the meat make sure you leave it out for 20 min to bring it up to room temperature while you prepare the grill. </p>
<h3 id="prepare-the-smoker">Prepare The Smoker</h3>
<p>While the prepared meat is sitting you will need to prepare the grill. You need to light the coals but not all of them. I like to like the center of them and then control the airflow. Keep in mind you will need to keep the smoker under 250F throughout the duration of the cook. </p>
<p><img src="/images/cooking/brisket-grill.jpeg" alt="" /></p>
<p>Another thing I like to use is a diffuser to provide indirect heat and allow just the smoke to cook it. If you do not have this it is not a problem. You can also add the apple wood chips inside a aluminum pouch at this time.</p>
<p><img src="/images/cooking/brisket-diffuse.jpeg" alt="" /></p>
<p>This may take about 20-30 min to bring the grill up to the right temperature before putting the meat on.</p>
<h3 id="cook-the-meat">Cook the Meat</h3>
<p>Now that the meat is room temperature and the grill is warm or close to the right temperature, grab the meat and place it on the smoker.</p>
<p><img src="/images/cooking/brisket-smoker.jpeg" alt="" /></p>
<p>Once you have placed the meat on the grate you can put in the temperature sensor sideways in the thickest side of the meat.</p>
<p><img src="/images/cooking/brisket-temperature.jpeg" alt="" /></p>
<p>Now comes the fun part… waiting. You will need to come out every 30-60 min to make sure the meat is not getting too hot/cold and make micro adjustments to the vents.</p>
<p><img src="/images/cooking/brisket-closed.jpeg" alt="" /></p>
<p>The internal temperature you are shooting for is 190F and it will take awhile for it to come up. When the meat is at 150F or it's been 3 hours and the skin is getting brown, you can wrap the meat in foil to lock in the juices.</p>
<p><img src="/images/cooking/brisket-mid.jpeg" alt="" /></p>
<p>The foil should cover all sides of the meat, and around this time you can add more wood chips to increase the smoke.</p>
<p><img src="/images/cooking/brisket-foil.jpeg" alt="" /></p>
<h3 id="enjoy">Enjoy</h3>
<p>Regardless of how it turned out it should still smell amazing and taste even better. If you made sure to come check on it often and not let it get to hot it should still be nice and juicy.</p>
<p><img src="/images/cooking/brisket-done.jpeg" alt="" /></p>
<p>It will be really tempting to eat it right away, but you need to let the meat rest for 20 min before eating.</p>
<p>Let me know how it turned out by mentioning me on <a href="https://twitter.com/rodydavis" rel="noopener noreferrer" target="_blank">twitter</a> or <a href="https://instagram.com/rodydavisjr" rel="noopener noreferrer" target="_blank">instagram</a>.</p>]]></content:encoded>
            <category>the-perfect-brisket.md</category>
            <enclosure url="https://rodydavis.com/images/cooking/brisket-start.jpeg" length="0" type="image/jpeg"/>
        </item>
    </channel>
</rss>